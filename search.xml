<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>RPA</title>
      <link href="2021/04/10/RPA/"/>
      <url>2021/04/10/RPA/</url>
      
        <content type="html"><![CDATA[<blockquote><p>RPA:机器人流程自动化系统，通过模拟用户在电脑上的手动操作，实现某种操作流程的自动化。本文是一个简单例子：自动登录网址，并截图报错本地，再发送到指定邮箱中。Python实现。</p></blockquote><span id="more"></span><h4><span id="登录网址截图保存到本地">登录网址截图保存到本地</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver &#x3D;webdriver.Chrome()</span><br><span class="line">## executable_path&#x3D;&#39;C:\workspace\RPA\chromedriver.exe&#39;</span><br><span class="line">## 设置窗口大小</span><br><span class="line">#全屏</span><br><span class="line">driver.maximize_window()</span><br><span class="line">## 访问地址 https:&#x2F;&#x2F;agn-xlab.idata.mobi&#x2F;user&#x2F;login</span><br><span class="line">url&#x3D;&#39;https:&#x2F;&#x2F;agn-xlab.idata.mobi&#x2F;user&#x2F;login&#39;</span><br><span class="line"></span><br><span class="line">driver.get(url&#x3D;url)</span><br><span class="line">## 设置等待阈值</span><br><span class="line">driver.implicitly_wait(10)</span><br><span class="line">## 登录</span><br><span class="line">driver.find_element_by_id(&#39;okta-signin-username&#39;).send_keys(&#39;JLi011&#39;)</span><br><span class="line">driver.find_element_by_id(&#39;okta-signin-password&#39;).send_keys(&#39;Allergan1&#39;)</span><br><span class="line">driver.find_element_by_id(&#39;okta-signin-submit&#39;).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 设置等待阈值</span><br><span class="line">driver.implicitly_wait(10)</span><br><span class="line">## 登录okta</span><br><span class="line">driver.find_element_by_id(&#39;input10&#39;).send_keys(&#39;科比布莱恩特&#39;)</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;form8&quot;]&#x2F;div[2]&#x2F;input&#39;).click()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 九宫格</span><br><span class="line">## driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;ul&#x2F;li[1]&#x2F;div&#39;).click()</span><br><span class="line">#driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;ul&#x2F;li[1]&#x2F;ul&#x2F;li&#x2F;div&#39;).click()</span><br><span class="line">#driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;ul&#x2F;li[1]&#x2F;ul&#x2F;li&#x2F;ul&#x2F;li&#39;).click()</span><br><span class="line">#driver.implicitly_wait(30)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 医生主题域</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;ul&#x2F;li[3]&#x2F;div&#39;).click()</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;ul&#x2F;li[3]&#x2F;ul&#x2F;li[1]&#x2F;div[1]&#39;).click()</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;ul&#x2F;li[3]&#x2F;ul&#x2F;li[1]&#x2F;ul&#x2F;li&#39;).click()</span><br><span class="line">## 隐藏菜单栏</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;i&#39;).click()</span><br><span class="line">time.sleep(3)</span><br><span class="line">## 截屏</span><br><span class="line">driver.get_screenshot_as_file(u&quot;C:\\Users\\admin\\Pictures\\xlab\\doctor.png&quot;)</span><br><span class="line">## 获取当前页面URL地址</span><br><span class="line">## url01 &#x3D; driver.current_url</span><br><span class="line"># driver.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4><span id="登录邮箱将截图发送出去">登录邮箱将截图发送出去</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">from selenium import webdriver</span><br><span class="line">import time</span><br><span class="line">import win32gui</span><br><span class="line">import win32con</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver &#x3D;webdriver.Chrome()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## executable_path&#x3D;&#39;C:\workspace\RPA\chromedriver.exe&#39;</span><br><span class="line">## 设置窗口大小</span><br><span class="line">#全屏</span><br><span class="line">driver.maximize_window()</span><br><span class="line">url&#x3D;&#39;https:&#x2F;&#x2F;login.partner.microsoftonline.cn&#x2F;&#39;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.get(url&#x3D;url)</span><br><span class="line">driver.implicitly_wait(5)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 登录邮箱</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;i0116&quot;]&#39;).send_keys(&#39;power_bi@intfocus.com&#39;)</span><br><span class="line">driver.find_element_by_id(&#39;idSIButton9&#39;).click()</span><br><span class="line">driver.implicitly_wait(3)</span><br><span class="line">time.sleep(1)</span><br><span class="line">driver.find_element_by_id(&#39;i0118&#39;).send_keys(&#39;PowerBI666&#39;)</span><br><span class="line">time.sleep(1)</span><br><span class="line">driver.find_element_by_id(&#39;idSIButton9&#39;).click()</span><br><span class="line">driver.implicitly_wait(3)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(&#39;idSIButton9&#39;).click()</span><br><span class="line">driver.implicitly_wait(3)</span><br><span class="line">## 进入邮箱</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;ShellMail_link&quot;]&#39;).click()</span><br><span class="line">time.sleep(3)</span><br><span class="line">## 新建邮件</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div[3]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div[1]&#x2F;button&#39;).click()</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div[3]&#x2F;div[2]&#x2F;div&#x2F;div[3]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div[1]&#x2F;div[1]&#x2F;div[1]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;input&#39;).send_keys(&#39;wenbin.que@intfocus.com&#39;)</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div[3]&#x2F;div[2]&#x2F;div&#x2F;div[3]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div[1]&#x2F;div[1]&#x2F;div[2]&#x2F;div&#x2F;div&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;input&#39;).send_keys(&#39;ben.wang@intfocus.com &#39;)</span><br><span class="line">time.sleep(1)</span><br><span class="line">driver.find_element_by_id(&#39;TextField957&#39;).send_keys(&#39;RPA 自动化测试&#39;)</span><br><span class="line">time.sleep(1)</span><br><span class="line">context&#x3D; &quot;Dear all，\n xlab实验室RAP自动化监控测试\n 医生主数据：\n&quot;</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div[3]&#x2F;div[2]&#x2F;div&#x2F;div[3]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div[2]&#x2F;div[1]&#39;).send_keys(context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">time.sleep(1)</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div[3]&#x2F;div[2]&#x2F;div&#x2F;div[3]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div[3]&#x2F;div[2]&#x2F;div[2]&#x2F;div&#x2F;div&#x2F;div&#x2F;div&#x2F;div[2]&#x2F;div&#x2F;div&#x2F;button&#39;).click()#send_keys(&#39;C:\\Users\\admin\\Pictures\\xlab\\doctor.png&#39;)</span><br><span class="line">time.sleep(3)  # 一定要加，弹出框后才有后续上传，之前因为没写弹窗没出后续执行无效</span><br><span class="line"></span><br><span class="line"># win32gui 操作系统选择文件的窗口</span><br><span class="line">def upload(filepath):</span><br><span class="line">    dialog &#x3D; win32gui.FindWindow(&quot;#32770&quot;,&quot;打开&quot;)  #一级窗口#如果是其它的浏览器，可能需要改第二个参数，谷歌叫打开</span><br><span class="line">    ComboBoxEx32 &#x3D; win32gui.FindWindowEx(dialog,0,&quot;ComboBoxEx32&quot;,None)  #二级</span><br><span class="line">    ComboBox &#x3D; win32gui.FindWindowEx(ComboBoxEx32,0,&quot;ComboBox&quot;,None)  #三级</span><br><span class="line">    #路径输入</span><br><span class="line">    edit &#x3D; win32gui.FindWindowEx(ComboBox,0,&quot;Edit&quot;,None)  #四级</span><br><span class="line">    #打开按钮</span><br><span class="line">    button &#x3D; win32gui.FindWindowEx(dialog,0,&quot;Button&quot;,&quot;打开(&amp;O)&quot;)  #二级</span><br><span class="line"></span><br><span class="line">    #filepath &#x3D; &quot;D:\\appium_server.log&quot;</span><br><span class="line">    #输入路径</span><br><span class="line">    #点击打开按钮</span><br><span class="line">    win32gui.SendMessage(edit,win32con.WM_SETTEXT,None,filepath)    #发送文件路径</span><br><span class="line">    win32gui.SendMessage(dialog, win32con.WM_COMMAND, 1, button)    #点击打开按钮</span><br><span class="line"></span><br><span class="line">upload(&quot;C:\\Users\\admin\\Pictures\\xlab\\doctor.png&quot;)</span><br><span class="line">## 发送文件</span><br><span class="line">driver.find_element_by_xpath(&#39;&#x2F;&#x2F;*[@id&#x3D;&quot;app&quot;]&#x2F;div&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;div[3]&#x2F;div[2]&#x2F;div&#x2F;div[3]&#x2F;div[1]&#x2F;div&#x2F;div&#x2F;div&#x2F;div[1]&#x2F;div[3]&#x2F;div[2]&#x2F;div[1]&#x2F;div&#x2F;span&#x2F;button[1]&#39;).click()#send_keys(&#39;C:\\Users\\admin\\Pictures\\xlab\\doctor.png&#39;)</span><br><span class="line"></span><br><span class="line">#driver.implicitly_wait(5)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RPA,python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>终端命令</title>
      <link href="2021/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/"/>
      <url>2021/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要记录终端命令包含Windows和Linux 命令</p></blockquote><span id="more"></span><h3><span id="windows">windows</span></h3><h4><span id="cmd打开软件">cmd打开软件</span></h4><ul><li>打开软件根目录即exe文件目录</li><li>doskey “标记”=“目录” ex：doskey IJ =”D:\apps\IntelliJ IDEA 2019.1.3\bin\idea64.exe” 目录有空格加“”号</li><li>在终端直接输入标记</li></ul><h4><span id="chcp">chcp</span></h4><ul><li>chcp 65001 换成UTF-8代码页</li><li>chcp 936 可以换回默认的GBK</li><li>chcp 437 是美国英语 </li></ul><h4><span id="在终端上查看vnc在linux服务器上的端口号">在终端上查看vnc在Linux服务器上的端口号</span></h4><ul><li>netstat -lp|grep -i vnc</li></ul><h4><span id="退出远程桌面全屏">退出远程桌面全屏</span></h4><ul><li>ctrl+ALt+break / ctrl +alt +fn+b</li></ul><h3><span id="linux">linux</span></h3><h4><span id="远程服务器">远程服务器</span></h4><ul><li>crontab -l 根据关键字查看日志</li><li>ls | grep digital 抓取关键字搜索</li></ul><h4><span id="复制远程服务器文件到本地">复制远程服务器文件到本地</span></h4><ul><li>scp <a href="mailto:&#115;&#x79;&#45;&#x64;&#101;&#118;&#x6f;&#112;&#x73;&#45;&#117;&#115;&#x65;&#114;&#x40;&#x34;&#55;&#x2e;&#x39;&#x39;&#46;&#50;&#x33;&#54;&#x2e;&#x31;&#x38;&#x31;">&#115;&#x79;&#45;&#x64;&#101;&#118;&#x6f;&#112;&#x73;&#45;&#117;&#115;&#x65;&#114;&#x40;&#x34;&#55;&#x2e;&#x39;&#x39;&#46;&#50;&#x33;&#54;&#x2e;&#x31;&#x38;&#x31;</a>:/data/work/scripts/allergan/user_behaviors/user_behavior.kjb D:\Data_work\etl</li><li>scp <a href="mailto:&#115;&#x79;&#x2d;&#x64;&#101;&#118;&#x6f;&#112;&#115;&#x2d;&#x75;&#115;&#x65;&#x72;&#x40;&#x34;&#x37;&#x2e;&#57;&#57;&#46;&#50;&#x33;&#54;&#x2e;&#x31;&#56;&#x31;">&#115;&#x79;&#x2d;&#x64;&#101;&#118;&#x6f;&#112;&#115;&#x2d;&#x75;&#115;&#x65;&#x72;&#x40;&#x34;&#x37;&#x2e;&#57;&#57;&#46;&#50;&#x33;&#54;&#x2e;&#x31;&#56;&#x31;</a>:/data/work/scripts/allergan/digital_ami_azure/exam.ktr C:\</li></ul><h4><span id="linux解压和压缩">Linux解压和压缩</span></h4><ul><li>zip -r archive_name.zip filename   （-r是压缩文件）</li><li>unzip archive_name.zip        （解压文件在当前文件下）</li><li>unzip archive_name.zip -d new_dir  （解压文件可以将文件解压缩至一个你指定的的目录，使用-d参数）</li></ul><h4><span id="linux-重命名文件">linux 重命名文件</span></h4><ul><li>eg:将目录A重命名B</li><li>mv a b</li><li>eg:将/a目录移动到/b下</li><li>并重命名c</li><li>mv /a /b/c</li></ul><h4><span id="linux-创建文件和文件夹">linux 创建文件和文件夹</span></h4><ul><li>mkdir</li></ul><p><img src="/2021/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/software\有道云\data\que_wen_bin@163.com\a4213457c36f4e45997cc2c13d4c8dee\image(1).png" alt="img"></p><p><img src="/2021/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/software\有道云\data\que_wen_bin@163.com\b0b94bfb820d4a4c85dfcb1e307c0062\ru5erkjggg==.png" alt="img"></p><p><img src="/2021/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/software\有道云\data\que_wen_bin@163.com\667a46a3f4954b748e171db5c2e33692\image(2).png" alt="img"></p><p><img src="/2021/04/10/%E7%BB%88%E7%AB%AF%E5%91%BD%E4%BB%A4/software\有道云\data\que_wen_bin@163.com\92ce4b87b4ea40fa8d7db8a276dfc5a6\suvork5cyii=.png" alt="img"></p><h4><span id="输入法仅桌面">输入法（仅桌面）</span></h4><ul><li>cmd ctfmon</li></ul><h4><span id="linux定位日志文件错误信息">linux定位日志文件错误信息**</span></h4><h4><span id="定位日志文件错误信息">定位日志文件错误信息</span></h4><p>示例：</p><p>cat all_info.log | grep “错误的关键信息提示” -C 10</p><h4><span id="修改文件所有者和组">修改文件所有者和组</span></h4><p> <strong>chgrp groupb filea</strong>   <strong>–改变filea所属群组</strong></p><p><strong>chown [-R] 账号名称   文件/目录</strong></p><h4><span id="修改用户主目录">修改用户主目录</span></h4><p>1.直接编辑 /etc/passwd</p><p>2.usermod -d /usr/newfolder -u uid         id username:查ID</p><h4><span id="linux-根据关键字查找文件且输出文件名">linux 根据关键字查找文件，且输出文件名</span></h4><p>sudo find /data/allergan/allergan_members -name ‘wechat_members*’ | head -n 1 | sed ‘s#.*/##’</p><h4><span id="linux-将命令结果赋值给变量">linux 将命令结果赋值给变量</span></h4><p>log=<code>ls</code></p><p>echo $log</p><p>log=$(ls)</p><p>echo $log</p><h4><span id="linux-查看文件大小">linux 查看文件大小</span></h4><p>du -sh *查看当前目录下各个文件及目录占用空间大小</p><p>du -sh 查看当前目录的总大小</p><p>df -h 查看系统中文件的使用情况</p><p>## Linux 查看当前目录</p><p>pwd</p><h4><span id="linux-创建脚本文件">Linux 创建脚本文件</span></h4><p>touch clear_logs.sh</p><h4><span id="linux-删除一个文件夹下所有文件">linux  删除一个文件夹下所有文件</span></h4><p>cd 目录</p><p>rm -rf *</p><h4><span id="linux-删除一个文件夹">Linux 删除一个文件夹</span></h4><p>rm -rf /目录</p><p>## 删除文件时出现 “操作无法完成，因为文件已在另一个程序中打开”</p><p>解决方法：</p><p>启动任务管理器——性能——资源监视器——CPU选项卡——关联的句柄——搜索句柄</p><p>——（输入）要删除的文件夹名——搜索到与文件夹名句柄相关联的进程 （由于此程序进程正在调用文件夹，才造成了对该文件夹删除的失败。）</p><p>——(右键)该进程——结束进程——弹出警告对话框——确认后即可结束该进程，然后就 可以完美删除该文件夹或者文件了。</p><h4><span id="查看进程端口号">查看进程端口号</span></h4><p>  netstat -ano</p><h4><span id="查看指定端口占用情况">查看指定端口占用情况</span></h4><p>netstat -ano|findstr “8080”</p><h4><span id="关闭进程">关闭进程**</span></h4><p>tasklist|findstr “127704”</p><h4><span id="修改linux-服务器桌面分辨率">修改linux 服务器桌面分辨率</span></h4><p>– xrandr</p><p>– xrandr -s 1920x1080</p><h4><span id="关闭防火墙">关闭防火墙</span></h4><p>sudo systemctl stop iptables</p><h4><span id="重启crontab">重启crontab</span></h4><p>sudo systemctl restart crond</p><h4><span id="kettle闪退">kettle闪退</span></h4><p>“$_PENTAHO_JAVA” $OPT -jar “$STARTUP” -lib $LIBPATH “${1+$@}” 2&gt;&amp;1</p><h4><span id="切换桌面环境">切换桌面环境</span></h4><p>startx 或者 init 5</p><h4><span id="查看ftp用户">查看ftp用户</span></h4><p>cat /etc/passwd | grep ftp</p><h4><span id="重启vsftpd服务器">重启vsFTPd服务器</span></h4><p>service vsftpd restart</p><h4><span id="vim">vim</span></h4><p>:w      - 保存文件，不退出 vim</p><p>:w file -将修改另外保存到 file 中，不退出 vim</p><p>:w!     -强制保存，不退出 vim</p><p>:wq     -保存文件，退出 vim</p><p>:wq!    -强制保存文件，退出 vim</p><p>:q      -不保存文件，退出 vim</p><p>:q!     -不保存文件，强制退出 vim</p><p>:e!     -放弃所有修改，从上次保存文件开始再编辑</p><p>ctrl+s 锁住  ctrl + q 解除锁定</p><h4><span id="改变文件夹所属用户和组">改变文件夹所属用户和组</span></h4><p>chown -R 所有者用户名.组名 文件夹名称</p><p>例如：chown -R zdz.nginx KooBox</p><h4><span id="用户操作">用户操作</span></h4><p>添加用户并设置主目录</p><p>useradd -d /home/www -g ftpgroup ftptest</p><p>删除用户</p><p>userdel -r ftptest</p><p>用户列表</p><p>cat /etc/passwd</p><h4><span id="设置sftp-并设置主目录但是限制在主目录中禁止返回上级目录amp禁止用于系统登录没有实现">设置sftp ,并设置主目录（但是限制在主目录中，禁止返回上级目录&amp;禁止用于系统登录没有实现）</span></h4><p>安装/卸载vsftpd服务</p><p>yum -y install vsftpd</p><p>yun remove vsftpd</p><h4><span id="配置vsftpd配置文件">配置vsftpd配置文件</span></h4><p>vi /etc/vsftpd/vsftpd.conf</p><h4><span id="启动重启关闭状态">启动/重启/关闭/状态</span></h4><p>service vsftpd start/restart/stop/status </p><h4><span id="创建ftp用户">创建ftp用户</span></h4><p>useradd -d /home/username username</p><h4><span id="创建用户组">创建用户组</span></h4><p>groupadd ftpgroups</p><h4><span id="ssh无法远程报错system-is-booting-up-see-pam_nologin8">ssh无法远程,报错”System is booting up. See pam_nologin(8)”</span></h4><p>修改文件： /etc/pam.d/sshd</p><p>vim /etc/pam.d/sshd</p><p>注释account required pam_nologin.so。即在这一行前边加#。保存即可</p><h4><span id="为普通用户添加sudo权限">为普通用户添加sudo权限</span></h4><p>root用户</p><p>vim /etc/sudoers //打开sudo的配置文件</p><p>在“root ALL=(ALL)ALL”这一行下面，加入如下图所示的一行 用户名 ALL=(ALL) ALL</p><h4><span id="windows-具有管理员权限的账号或administrator-修改其他用户密码">windows 具有管理员权限的账号或administrator 修改其他用户密码</span></h4><p>打开Windows PowerShell(管理员)</p><p>例：修改administrator密码为123456</p><p>net user administrator 123456</p><h4><span id="查看centos版本">查看CentOS版本</span></h4><p>cat /etc/redhat-release</p><h4><span id="批量修改文件为可执行文件">批量修改文件为可执行文件</span></h4><p>chmod +x test2.sh</p>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 终端命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Android开发</title>
      <link href="2021/04/10/android%E5%BC%80%E5%8F%91/"/>
      <url>2021/04/10/android%E5%BC%80%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="pdf.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TCP拥塞控制</title>
      <link href="2021/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/"/>
      <url>2021/04/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C-TCP%E6%8B%A5%E5%A1%9E%E6%8E%A7%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<blockquote><p>摘要：本次论文以5-39题展开论述，讨论TCP的拥塞窗口随着传输轮次n的变化，在各个阶段使用不同TCP拥塞控制算法。通过实例详细论述各个算法的工作机制及工作时段。在某段时间，若对网络中某一资源的需求超过了该资源所能提供的可用部分，即∑对资源的需求&gt;可用资源。这种情况就叫做拥塞。而TCP作为整个网络运输层的通信协议，就有拥塞避免的算法。它使用一套线增积减的模式多样化网络拥塞控制方法来控制拥塞。其主要的算法有四种即慢开始、拥塞避免、快重传、快恢复。</p><p>关键词：拥塞避免；慢开始；快重传；快恢复；</p></blockquote><div class="row">    <embed src="pdf.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 计算机网络 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TCP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-附录</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E9%99%84%E5%BD%95/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E9%99%84%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文是在学习算法阶段后。对快速排序、合并排序、堆排序时间复杂度、空间复杂度及优缺点总结；递归、回溯和DFS的区别；动态规划与贪心的区别。</p></blockquote><span id="more"></span><h4><span id="1-快速排序-合并排序-堆排序时间复杂度-空间复杂度及优缺点总结">1、快速排序、合并排序、堆排序时间复杂度、空间复杂度及优缺点总结。</span></h4><p><strong>时间复杂度：三种排序算法的平均时间复杂度为O(nlog(n)),快排的最坏时间复杂度是O(n2)。</strong></p><p><strong>空间复杂度：快速排序和堆排序都是就地排序，空间复杂度都为O(1)，合并排序需要合并两个数组，因此必须开辟新的空间，空间复杂度为O(n)。</strong></p><p><strong>稳定性：合并排序是稳定的排序，快排和堆排序不是稳定的排序。</strong></p><p><strong>一班情况下快排是最快的排序算法。</strong></p><p><strong>问题：尽管这两种排序算法的时间复杂度都是O(nlogn)，甚至堆排序和合并排序比快速排序的时间复杂度还要稳定，但是，是实际软件开发中，快速的排序的性能要比堆排序和合并好，这是为什么？</strong></p><p><strong>第一、堆排序访问数据的方式没有快速排序友好。对于快速排序来说，数据是顺序访问的。而对于堆排序和合并排序来说，数据是跳着访问的，这样对CPU缓存是不友好的。</strong></p><p><strong>第二、对于同样的数据，在排序过程中，堆排序算法和合并的数据交换次数要多于快速排序。堆排序第一步是建堆，建堆的过程就会打乱数据原有的相对选择顺序，导致数据的有序度降低。快排的内存写操作次数平摊下来是T(n*lg(n)/2)，而归并的内存写操作次数是严格的O(n*log(n))，由于内存写操作开销比较大，所以对于随机数据快排优于归并。</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E9%99%84%E5%BD%95/16.1.png"></p><h4><span id="2-递归-回溯和dfs的区别">2、递归、回溯和DFS的区别。</span></h4><p><strong>（1）递归是一种算法结构，回溯是一种算法思想。</strong></p><p><strong>（2）一个递归就是在函数中调用函数本身来解决问题。</strong></p><p><strong>（3）回溯就是通过不同的尝试来生成问题的解，有点类似于穷举，但是和穷举不同的是回溯会“剪枝”。</strong></p><p><strong>剪枝的意思也就是说对已经知道错误的结果没必要再枚举接下来的答案了，比如一个有序数列1,2,3,4,5，我要找和为5的所有集合，从前往后搜索我选了1，然后2，然后选3的时候发现和已经大于预期，那么4,5肯定也不行，这就是一种对搜索过程的优化。</strong></p><p><strong>回溯搜索是深度优先搜索（DFS）的一种。对于某一个搜索树来说（搜索树是起记录路径和状态判断的作用），回溯和DFS，其主要的区别是，回溯法在求解过程中不保留完整的树结构，而深度优先搜索则记下完整的搜索树。</strong></p><p><strong>为了减少存储空间，在深度优先搜索中，用标志的方法记录访问过的状态，这种处理方法使得深度优先搜索法与回溯法没什么区别了。</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E9%99%84%E5%BD%95/16.2.png"></p><h4><span id="3-动态规划与贪心的区别">3、动态规划与贪心的区别</span></h4><p><strong>相同点：动态规划和贪心都是一种递推算法，都是由局部最优解推导全局最优解。</strong></p><p><strong>不同点：1.贪心算法中，贪心追求每步的最优解，所以贪心的每一步最优解一定包含上一步的最优解。2.动态规划中，全局最优解一定包含某个局部最优解，但不一定包含前一个局部最优解，因此动态规划需要将每步之前的最优解的结果存储起来，后面用到再拿来用，减少计算量。</strong></p><p><strong>总结：贪心是动态规划的特例，贪心不一定得到全局最优解，动态规划能够得到全局最优解。贪心通常用在局部最优对于当前问题是显而易见的最优情况。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构-栈、队列、优先队列</title>
      <link href="2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/"/>
      <url>2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4><span id="1-栈stack">1、栈（stack）</span></h4><p>先进后出（后进先出）如图：进栈顺序a-&gt;b-&gt;c,出栈顺序c-&gt;b-&gt;a。</p><span id="more"></span><p><img src="/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/15.1.png"></p><p>示例代码：Stack1.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">int stack[1000];</span><br><span class="line">int top&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;进栈，top先加1再进栈 </span><br><span class="line">void push(int x)&#123;</span><br><span class="line">stack[++top] &#x3D; x;</span><br><span class="line">&#125;</span><br><span class="line">int up()&#123;</span><br><span class="line">return stack[top];</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;出栈，先出栈，top再减1 </span><br><span class="line">void pop()&#123;</span><br><span class="line">top--; </span><br><span class="line">&#125;</span><br><span class="line">int size()&#123;</span><br><span class="line">return top;</span><br><span class="line">&#125;</span><br><span class="line">bool isEmpty()&#123;</span><br><span class="line">return !top;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int i,j,n;</span><br><span class="line">printf(&quot;栈&quot;);</span><br><span class="line">printf(&quot;当前栈大小为：%d\n请输入要进栈的数据以&#39;0&#39;结束：&quot;, size());</span><br><span class="line">while(~scanf(&quot;%d&quot;,&amp;i))&#123;</span><br><span class="line">if(i&#x3D;&#x3D;0) break ;</span><br><span class="line">push(i);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;当前栈的大小为：%d\n&quot;, size()); </span><br><span class="line">n &#x3D; size();</span><br><span class="line">fflush(stdin);&#x2F;&#x2F;清空输入缓存</span><br><span class="line">printf(&quot;输入1查看栈顶元素，输入2数据依次出栈：&quot;);</span><br><span class="line">int tip;</span><br><span class="line">scanf(&quot;%d&quot;, &amp;tip);</span><br><span class="line">if(tip &#x3D;&#x3D; 1)&#123;</span><br><span class="line">printf(&quot;栈顶元素为：%d&quot;,up());</span><br><span class="line">&#125;</span><br><span class="line">if(tip &#x3D;&#x3D; 2 &amp;&amp; !isEmpty())&#123;</span><br><span class="line">printf(&quot;依次出栈：&quot;);</span><br><span class="line">for(j &#x3D; n - 1 ; j &gt;&#x3D; 0 ; j --)&#123;</span><br><span class="line">printf(&quot;%d &quot;,up());</span><br><span class="line">pop();</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n当前栈大小为：%d\n&quot;,size());</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="2-队列queue">2、队列（queue）</span></h4><p>先进先出(先进先出)如图：进队顺序a-&gt;b-&gt;c,出队顺序a-&gt;b-&gt;c。</p><p> <img src="/2021/04/10/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88%E3%80%81%E9%98%9F%E5%88%97%E3%80%81%E4%BC%98%E5%85%88%E9%98%9F%E5%88%97/15.2.png"></p><p>示例代码：queue.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;队列（queue）</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;ctype.h&gt;</span><br><span class="line">int queue[1000];</span><br><span class="line">int head&#x3D;0;</span><br><span class="line">int tail&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;进队</span><br><span class="line">void push(int data) &#123;</span><br><span class="line">queue[tail ++] &#x3D; data;</span><br><span class="line">&#125;</span><br><span class="line">int up() &#123;</span><br><span class="line">return queue[head];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;出队，先出队head，再加1</span><br><span class="line">void pop() &#123;</span><br><span class="line">head ++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;当前队列长度</span><br><span class="line">int size() &#123;</span><br><span class="line">return tail - head;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;判断队列是否为空</span><br><span class="line">int isEmpty() &#123;</span><br><span class="line">if(head &#x3D;&#x3D; tail) return 1;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int i, j, n, tip;</span><br><span class="line"></span><br><span class="line">printf(&quot;队列（queue）\n&quot;);</span><br><span class="line">printf(&quot;当前队列长度：%d\n请输入要进队列的数据以0结束：&quot;, size());</span><br><span class="line"></span><br><span class="line">while(~scanf(&quot;%d&quot;,&amp;i)) &#123;</span><br><span class="line">if(i &#x3D;&#x3D; 0 ) break;</span><br><span class="line">push(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;当前队列长度：%d\n&quot;,size());</span><br><span class="line">n &#x3D; size();</span><br><span class="line"></span><br><span class="line">fflush(stdin);&#x2F;&#x2F;清空输入缓存</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">while(1) &#123;</span><br><span class="line">printf(&quot;\n输入1查看队首元素，输入2查看队尾元素，输入3数据依次出队：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;, &amp;tip);</span><br><span class="line">if(isEmpty()) &#123;</span><br><span class="line">printf(&quot;抱歉，该队列为空！\n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125; else if(tip &#x3D;&#x3D; 1) &#123;</span><br><span class="line">printf(&quot;队首元素为：%d&quot;, up());</span><br><span class="line">&#125; else if(tip &#x3D;&#x3D; 2) &#123;</span><br><span class="line">printf(&quot;队尾元素为：%d&quot;, queue[n-1]);</span><br><span class="line">&#125; else if(tip &#x3D;&#x3D; 3) &#123;</span><br><span class="line">printf(&quot;依次出队：&quot;);</span><br><span class="line">for(j &#x3D; n-1  ; j &gt;&#x3D; 0 ; j --) &#123;</span><br><span class="line">printf(&quot;%d &quot;,up());</span><br><span class="line">pop();</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n当前队列大小为：%d\n&quot;,size());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="3-优先队列priority_queue">3、优先队列（priority_queue）</span></h4><p>priority_queue本质是一个堆。</p><p>Priority_queue的结构：\priority_queue&lt;结构类型&gt; 队列名；</p><p>参数：priority_queue&lt;Type, Container, Functional&gt;</p><p>Container：是保存数据的容器，Functional是元素比较的方式，Type数据类型，若只写数据类型，容器默认使用vector,比较方式默认使用operator &lt;,就是大顶堆。</p><p>基本操作：</p><p>q.size();//返回q里元素个数</p><p>q.empty();//返回q是否为空，空则返回1，否则返回0</p><p>q.push(k);//在q的末尾插入k</p><p>q.pop();//删掉q的第一个元素</p><p>q.top();//返回q的第一个元素</p><p>q.back();//返回q的末尾元素</p><p>最常用的结构:</p><p>① Priority_queue &lt;数据类型&gt;</p><p>② priority_queue <node> q;//node是一个结构体</node></p><p>③ priority_queue &lt;int,vector<int>,greater<int> &gt; q;//小顶堆</int></int></p><p>④ priority_queue &lt;int,vector<int>,less<int> &gt;q;//大顶堆</int></int></p><p>示例代码①：priority_queue1.cpp</p><p>示例代码②：priority_queue2.cpp</p><p>示例代码③：priority_queue3.cpp</p><p>示例代码④：priority_queue3.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">priority_queue&lt;int&gt; q;</span><br><span class="line">int main()&#123;</span><br><span class="line">q.push(9);q.push(11);q.push(1);q.push(4);q.push(32);q.push(6);</span><br><span class="line">while(!q.empty())&#123;</span><br><span class="line">printf(&quot;%d &quot;,q.top());q.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct node</span><br><span class="line">&#123;</span><br><span class="line">    int x,y;</span><br><span class="line">    bool operator &lt; (const node &amp; a) const</span><br><span class="line">    &#123;</span><br><span class="line">        return x&lt;a.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;k;</span><br><span class="line">priority_queue &lt;node&gt; q;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    k.x&#x3D;10,k.y&#x3D;100; q.push(k);</span><br><span class="line">    k.x&#x3D;12,k.y&#x3D;60; q.push(k);</span><br><span class="line">    k.x&#x3D;14,k.y&#x3D;40; q.push(k);</span><br><span class="line">    k.x&#x3D;6,k.y&#x3D;80; q.push(k);</span><br><span class="line">    k.x&#x3D;8,k.y&#x3D;20; q.push(k);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">    &#123;</span><br><span class="line">        node m&#x3D;q.top(); q.pop();</span><br><span class="line">        printf(&quot;(%d,%d) &quot;,m.x,m.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;cstdio&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">priority_queue &lt;int,vector&lt;int&gt;,less&lt;int&gt; &gt; p;</span><br><span class="line">priority_queue &lt;int,vector&lt;int&gt;,greater&lt;int&gt; &gt; q;</span><br><span class="line">int a[5]&#x3D;&#123;10,12,14,6,8&#125;;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    for(int i&#x3D;0;i&lt;5;i++)</span><br><span class="line">        p.push(a[i]),q.push(a[i]);</span><br><span class="line"> </span><br><span class="line">    printf(&quot;less&lt;int&gt;:&quot;);</span><br><span class="line">    while(!p.empty())</span><br><span class="line">        printf(&quot;%d &quot;,p.top()),p.pop();  </span><br><span class="line"> </span><br><span class="line">    printf(&quot;\ngreater&lt;int&gt;:&quot;);</span><br><span class="line">    while(!q.empty())</span><br><span class="line">        printf(&quot;%d &quot;,q.top()),q.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据机构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-哈夫曼树</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4><span id="哈夫曼树">哈夫曼树</span></h4><p><strong>概念：哈夫曼树又称最优二叉树，哈夫曼树是带权路径长度最短的树，权值较大的结点离根较近。</strong></p><span id="more"></span><p><strong>哈夫曼树如图：</strong></p><p> <img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/14.1.png">      </p><p><strong>带权路径长度WPL=  ，w指权值，l指结点高度</strong></p><p><strong>示例：有19米长的木板，切割成8m,3m,8m三份，切割的木板多长就需要花费多少金币，求花费最少为多少金币？</strong></p><p><strong>示例代码：huffman.cpp</strong></p><p><strong>哈夫曼编码：能够使用尽可能少的编码总位数表示字符串，且能够保证没有一个字符的编码是另外一个字符编码的前缀，不会出现二义性。</strong></p><p><strong>示例：比如 a b c d e 出现的频率分别是5 4 3 2 1 求a b c d e 的哈夫曼编码。</strong></p><p><strong>分析过程：</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E5%93%88%E5%A4%AB%E6%9B%BC%E6%A0%91/14.2.png"></p><p><strong>示例代码：huffman3.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line"> </span><br><span class="line">#define N 5&#x2F;&#x2F;带权值的叶子节点数或者是需要编码的字符数</span><br><span class="line">#define M 2*N-1&#x2F;&#x2F;n个叶子节点构造的哈夫曼树有2n-1个结点</span><br><span class="line">#define MAX 10000</span><br><span class="line">typedef char TElemType;</span><br><span class="line">&#x2F;&#x2F;静态三叉链表存储结构</span><br><span class="line">typedef struct&#123;</span><br><span class="line">&#x2F;&#x2F;TElemType data;</span><br><span class="line">unsigned int weight;&#x2F;&#x2F;权值只能是正数</span><br><span class="line">int parent;</span><br><span class="line">int lchild;</span><br><span class="line">int rchild;</span><br><span class="line">&#125;HTNode;&#x2F;&#x2F;, *HuffmanTree;</span><br><span class="line">typedef HTNode HuffmanTree[M+1];&#x2F;&#x2F;0号单元不使用</span><br><span class="line"> </span><br><span class="line">typedef char * HuffmanCode[N+1];&#x2F;&#x2F;存储每个字符的哈夫曼编码表，是一个字符指针数组，每个数组元素是指向字符指针的指针</span><br><span class="line">&#x2F;&#x2F;构造哈夫曼树</span><br><span class="line">&#x2F;&#x2F;在HT[1...k]里选择parent为0的且权值最小的2结点，其序号分别为s1,s2，parent不为0说明该结点已经参与构造了，故不许再考虑</span><br><span class="line">void select(HuffmanTree HT, int k, int &amp;s1, int &amp;s2)&#123;</span><br><span class="line">&#x2F;&#x2F;假设s1对应的权值总是&lt;&#x3D;s2对应的权值</span><br><span class="line">unsigned int tmp &#x3D; MAX, tmpi &#x3D; 0;</span><br><span class="line">for(int i &#x3D; 1; i &lt;&#x3D; k; i++)&#123;</span><br><span class="line">if(!HT[i].parent)&#123;&#x2F;&#x2F;parent必须为0</span><br><span class="line">if(tmp &gt; HT[i].weight)&#123;</span><br><span class="line">tmp &#x3D; HT[i].weight;&#x2F;&#x2F;tmp最后为最小的weight</span><br><span class="line">tmpi &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s1 &#x3D; tmpi;</span><br><span class="line"></span><br><span class="line">tmp &#x3D; MAX;</span><br><span class="line">tmpi &#x3D; 0;</span><br><span class="line">for(int i &#x3D; 1; i &lt;&#x3D; k; i++)&#123;</span><br><span class="line">if((!HT[i].parent) &amp;&amp; i!&#x3D;s1)&#123;&#x2F;&#x2F;parent为0</span><br><span class="line">if(tmp &gt; HT[i].weight)&#123;</span><br><span class="line">tmp &#x3D; HT[i].weight;</span><br><span class="line">tmpi &#x3D; i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">s2 &#x3D; tmpi;</span><br><span class="line">&#125;</span><br><span class="line">void createHuffmanTree(HuffmanTree &amp;HT, int *w, int n)&#123;</span><br><span class="line">if(n &lt;&#x3D; 1)</span><br><span class="line">return;</span><br><span class="line">&#x2F;&#x2F;对树赋初值</span><br><span class="line">int i;</span><br><span class="line">for(i &#x3D; 1; i &lt;&#x3D; n; i++)&#123;&#x2F;&#x2F;HT前n个分量存储叶子节点，他们均带有权值</span><br><span class="line">HT[i].weight &#x3D; w[i];</span><br><span class="line">HT[i].lchild &#x3D; 0;</span><br><span class="line">HT[i].parent &#x3D; 0;</span><br><span class="line">HT[i].rchild &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">for(; i &lt;&#x3D;M; i++)&#123;&#x2F;&#x2F;HT后m-n个分量存储中间结点，最后一个分量显然是整棵树的根节点</span><br><span class="line">HT[i].weight &#x3D; 0;</span><br><span class="line">HT[i].lchild &#x3D; 0;</span><br><span class="line">HT[i].parent &#x3D; 0;</span><br><span class="line">HT[i].rchild &#x3D; 0;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;开始构建哈夫曼树，即创建HT的后m-n个结点的过程，直至创建出根节点。用哈夫曼算法</span><br><span class="line">for(i &#x3D; n+1; i &lt;&#x3D; M; i++)&#123;</span><br><span class="line">int s1, s2;</span><br><span class="line">select(HT, i-1, s1, s2);&#x2F;&#x2F;在HT[1...i-1]里选择parent为0的且权值最小的2结点，其序号分别为s1,s2，parent不为0说明该结点已经参与构造了，故不许再考虑</span><br><span class="line">HT[s1].parent &#x3D; i;</span><br><span class="line">HT[s2].parent &#x3D; i;</span><br><span class="line">HT[i].lchild &#x3D; s1;</span><br><span class="line">HT[i].rchild &#x3D; s2;</span><br><span class="line">HT[i].weight &#x3D; HT[s1].weight + HT[s2].weight;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;打印哈夫曼满树</span><br><span class="line">void printHuffmanTree(HuffmanTree HT, char ch[])&#123;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">printf(&quot;data, weight, parent, lchild, rchild\n&quot;);</span><br><span class="line">for(int i &#x3D; 1; i &lt;&#x3D; M; i++)&#123;</span><br><span class="line">if(i &gt; N)&#123;</span><br><span class="line">printf(&quot;  -, %5d, %5d, %5d, %5d\n&quot;, HT[i].weight, HT[i].parent, HT[i].lchild, HT[i].rchild);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">printf(&quot;  %c, %5d, %5d, %5d, %5d\n&quot;, ch[i], HT[i].weight, HT[i].parent, HT[i].lchild, HT[i].rchild);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;为每个字符求解哈夫曼编码，从叶子到根逆向求解每个字符的哈夫曼编码</span><br><span class="line">void encodingHuffmanCode(HuffmanTree HT, HuffmanCode &amp;HC)&#123;</span><br><span class="line">&#x2F;&#x2F;char *tmp &#x3D; (char *)malloc(n * sizeof(char));&#x2F;&#x2F;将每一个字符对应的编码放在临时工作空间tmp里，每个字符的编码长度不会超过n</span><br><span class="line">char tmp[N];</span><br><span class="line">tmp[N-1] &#x3D; &#39;\0&#39;;&#x2F;&#x2F;编码的结束符</span><br><span class="line">int start, c, f;</span><br><span class="line">for(int i &#x3D; 1; i &lt;&#x3D; N; i++)&#123;&#x2F;&#x2F;对于第i个待编码字符即第i个带权值的叶子节点</span><br><span class="line">start &#x3D; N-1;&#x2F;&#x2F;编码生成以后，start将指向编码的起始位置</span><br><span class="line">c &#x3D; i;</span><br><span class="line">f &#x3D; HT[i].parent;</span><br><span class="line"> </span><br><span class="line">while(f)&#123;&#x2F;&#x2F;f!&#x3D;0,即f不是根节点的父节点</span><br><span class="line">if(HT[f].lchild &#x3D;&#x3D; c)&#123;</span><br><span class="line">tmp[--start] &#x3D; &#39;0&#39;;</span><br><span class="line">&#125;else&#123;&#x2F;&#x2F;HT[f].rchild &#x3D;&#x3D; c,注意:由于哈夫曼树中只存在叶子节点和度为2的节点，所以除开叶子节点，节点一定有左右2个分支</span><br><span class="line">tmp[--start] &#x3D; &#39;1&#39;;</span><br><span class="line">&#125;</span><br><span class="line">c &#x3D; f;</span><br><span class="line">f &#x3D; HT[f].parent;</span><br><span class="line">&#125;</span><br><span class="line">HC[i] &#x3D; (char *)malloc((N-start)*sizeof(char));&#x2F;&#x2F;每次tmp的后n-start个位置有编码存在</span><br><span class="line">strcpy(HC[i], &amp;tmp[start]);&#x2F;&#x2F;将tmp的后n-start个元素分给H[i]指向的的字符串</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;打印哈夫曼编码表</span><br><span class="line">void printHuffmanCoding(HuffmanCode HC, char ch[])&#123;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">for(int i &#x3D; 1; i &lt;&#x3D; N; i++)&#123;</span><br><span class="line">printf(&quot;%c:%s\n&quot;, ch[i], HC[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;解码过程：从哈夫曼树的根节点出发，按字符&#39;0&#39;或&#39;1&#39;确定找其左孩子或右孩子，直至找到叶子节点即可，便求得该字串相应的字符</span><br><span class="line">void decodingHuffmanCode(HuffmanTree HT, char *ch, char testDecodingStr[], int len, char *result)&#123;</span><br><span class="line">int p &#x3D; M;&#x2F;&#x2F;HT的最后一个节点是根节点，前n个节点是叶子节点</span><br><span class="line">int i &#x3D; 0;&#x2F;&#x2F;指示测试串中的第i个字符</span><br><span class="line">&#x2F;&#x2F;char result[30];&#x2F;&#x2F;存储解码以后的字符串</span><br><span class="line">int j &#x3D; 0;&#x2F;&#x2F;指示结果串中的第j个字符</span><br><span class="line">while(i&lt;len)&#123;</span><br><span class="line">if(testDecodingStr[i] &#x3D;&#x3D; &#39;0&#39;)&#123;</span><br><span class="line">p &#x3D; HT[p].lchild;</span><br><span class="line">&#125;</span><br><span class="line">if(testDecodingStr[i] &#x3D;&#x3D; &#39;1&#39;)&#123;</span><br><span class="line">p &#x3D; HT[p].rchild;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">if(p &lt;&#x3D; N)&#123;&#x2F;&#x2F;p&lt;&#x3D;N则表明p为叶子节点,因为在构造哈夫曼树HT时，HT的m个节点中前n个节点为叶子节点</span><br><span class="line">result[j] &#x3D; ch[p];</span><br><span class="line">j++;</span><br><span class="line">p &#x3D; M;&#x2F;&#x2F;p重新指向根节点</span><br><span class="line">&#125;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">result[j] &#x3D; &#39;\0&#39;;&#x2F;&#x2F;结果串的结束符</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">HuffmanTree HT;</span><br><span class="line"></span><br><span class="line">TElemType ch[N+1];&#x2F;&#x2F;0号单元不使用，存储n个等待编码的字符</span><br><span class="line">int w[N+1];&#x2F;&#x2F;0号单元不使用，存储n个字符对应的权值</span><br><span class="line">printf(&quot;请输入%d个字符以及该字符对应的权值(如:a,20):\n&quot;, N);</span><br><span class="line">for(int i &#x3D; 1; i &lt;&#x3D; N; i++)&#123;</span><br><span class="line">scanf(&quot;%c,%d&quot;, &amp;ch[i], &amp;w[i]);</span><br><span class="line">getchar();&#x2F;&#x2F;吃掉换行符</span><br><span class="line">&#125;&#x2F;&#x2F;即w里第i个权值对应的是ch里第i个字符元素</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">createHuffmanTree(HT, w , N);&#x2F;&#x2F;构建哈夫曼树</span><br><span class="line">printHuffmanTree(HT, ch);</span><br><span class="line"></span><br><span class="line">HuffmanCode HC;&#x2F;&#x2F;HC有n个元素，每个元素是一个指向字符串的指针，即每个元素是一个char *的变量</span><br><span class="line">encodingHuffmanCode(HT, HC);&#x2F;&#x2F;为每个字符求解哈夫曼编码</span><br><span class="line">printHuffmanCoding(HC, ch);</span><br><span class="line"> </span><br><span class="line">&#x2F;&#x2F;解码测试用例：abaccda----01000101101110</span><br><span class="line">char * testDecodingStr &#x3D; &quot;01000101101110&quot;;</span><br><span class="line">int testDecodingStrLen &#x3D; 14;</span><br><span class="line">printf(&quot;编码%s对应的字符串是：&quot;, testDecodingStr);</span><br><span class="line">char result[30];&#x2F;&#x2F;存储解码以后的字符串</span><br><span class="line">decodingHuffmanCode(HT, ch, testDecodingStr, testDecodingStrLen, result);&#x2F;&#x2F;解码（译码），通过一段给定的编码翻译成对应的字符串</span><br><span class="line">printf(&quot;%s\n&quot;, result);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-哈希算法</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h4><span id="哈希算法">哈希算法</span></h4><p><strong>概念：哈希算法是一种只能加密，不能解密的密码学算法，可以将任意长度的信息通过散列算法转换成一段固定长度的字符串，且若输入的消息不同，它们对应到不同字符串的机率很高</strong>。</p><span id="more"></span><p><strong>优秀的哈希算法有以下特点：</strong></p><p><strong>①正向快速，即要求在很快的时间内将明文通过散列算法计算出哈希值。</strong></p><p><strong>②逆向困难，即给定哈希值，在有限的时间内基本不可能逆推出明文。</strong></p><p><strong>③输入敏感，即输入信息稍微修改，产生的哈希值差别应该会很大。</strong></p><p><strong>④抗冲突性，不同的输入不能产生相同的输出，抗冲突性不是不会有冲突，只是找到有冲突的两个输入的代价非常大。</strong></p><p><strong>网址：<a href="http://www.fileformat.info/tool/hash.html">www.fileformat.info/tool/hash.html</a></strong></p><p><strong>示例：对任意字符串进行md5加密</strong></p><p><strong>示例代码：c2.dev(md5.h mad5.c main.c)</strong><br>    <strong>示例：哈希算法不仅仅可以用于加密，也可以用于检验信息是否是相同的，比如上传文件，对上传的文件生成哈希值，可以避免重复上传，因为上传的文件一样，他们生成的哈希值也是一样的，具体一点就是如果有人传送了一份文件给一个人，然后又有一个人传送了相同的文件给了另外一个人，那么这个社交软件在第二次传送文件的时候会对比两次传送的哈希值，发现是相同的，该软件就不会再次上传文件给服务器了。</strong></p><p><strong>示例代码：hash.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;time.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef unsigned char *POINTER;</span><br><span class="line">typedef unsigned short int UINT2;</span><br><span class="line">typedef unsigned long int UINT4;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line">UINT4 state[4];</span><br><span class="line">UINT4 count[2];</span><br><span class="line">unsigned char buffer[64];</span><br><span class="line">&#125; MD5_CTX;</span><br><span class="line"></span><br><span class="line">void MD5Init(MD5_CTX *);</span><br><span class="line">void MD5Update(MD5_CTX *, unsigned char *, unsigned int);</span><br><span class="line">void MD5Final(unsigned char [16], MD5_CTX *);</span><br><span class="line"></span><br><span class="line">#define S11 7</span><br><span class="line">#define S12 12</span><br><span class="line">#define S13 17</span><br><span class="line">#define S14 22</span><br><span class="line">#define S21 5</span><br><span class="line">#define S22 9</span><br><span class="line">#define S23 14</span><br><span class="line">#define S24 20</span><br><span class="line">#define S31 4</span><br><span class="line">#define S32 11</span><br><span class="line">#define S33 16</span><br><span class="line">#define S34 23</span><br><span class="line">#define S41 6</span><br><span class="line">#define S42 10</span><br><span class="line">#define S43 15</span><br><span class="line">#define S44 21</span><br><span class="line"></span><br><span class="line">static unsigned char PADDING[64] &#x3D; &#123;</span><br><span class="line">0x80, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</span><br><span class="line">0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,</span><br><span class="line">0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#define F(x, y, z) (((x) &amp; (y)) | ((~x) &amp; (z)))</span><br><span class="line">#define G(x, y, z) (((x) &amp; (z)) | ((y) &amp; (~z)))</span><br><span class="line">#define H(x, y, z) ((x) ^ (y) ^ (z))</span><br><span class="line">#define I(x, y, z) ((y) ^ ((x) | (~z)))</span><br><span class="line"></span><br><span class="line">#define ROTATE_LEFT(x, n) (((x) &lt;&lt; (n)) | ((x) &gt;&gt; (32-(n))))</span><br><span class="line"></span><br><span class="line">#define FF(a, b, c, d, x, s, ac) &#123;   (a) +&#x3D; F ((b), (c), (d)) + (x) + (UINT4)(ac);   (a) &#x3D; ROTATE_LEFT ((a), (s));   (a) +&#x3D; (b);   &#125;</span><br><span class="line">#define GG(a, b, c, d, x, s, ac) &#123;   (a) +&#x3D; G ((b), (c), (d)) + (x) + (UINT4)(ac);   (a) &#x3D; ROTATE_LEFT ((a), (s));   (a) +&#x3D; (b);   &#125;</span><br><span class="line">#define HH(a, b, c, d, x, s, ac) &#123;   (a) +&#x3D; H ((b), (c), (d)) + (x) + (UINT4)(ac);   (a) &#x3D; ROTATE_LEFT ((a), (s));   (a) +&#x3D; (b);   &#125;</span><br><span class="line">#define II(a, b, c, d, x, s, ac) &#123;   (a) +&#x3D; I ((b), (c), (d)) + (x) + (UINT4)(ac);   (a) &#x3D; ROTATE_LEFT ((a), (s));   (a) +&#x3D; (b); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">inline void Encode(unsigned char *output, UINT4 *input, unsigned int len) &#123;</span><br><span class="line">unsigned int i, j;</span><br><span class="line"></span><br><span class="line">for (i &#x3D; 0, j &#x3D; 0; j &lt; len; i++, j +&#x3D; 4) &#123;</span><br><span class="line">output[j] &#x3D; (unsigned char)(input[i] &amp; 0xff);</span><br><span class="line">output[j+1] &#x3D; (unsigned char)((input[i] &gt;&gt; 8) &amp; 0xff);</span><br><span class="line">output[j+2] &#x3D; (unsigned char)((input[i] &gt;&gt; 16) &amp; 0xff);</span><br><span class="line">output[j+3] &#x3D; (unsigned char)((input[i] &gt;&gt; 24) &amp; 0xff);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void Decode(UINT4 *output, unsigned char *input, unsigned int len) &#123;</span><br><span class="line">unsigned int i, j;</span><br><span class="line"></span><br><span class="line">for (i &#x3D; 0, j &#x3D; 0; j &lt; len; i++, j +&#x3D; 4)</span><br><span class="line">output[i] &#x3D; ((UINT4)input[j]) | (((UINT4)input[j+1]) &lt;&lt; 8) |</span><br><span class="line">            (((UINT4)input[j+2]) &lt;&lt; 16) | (((UINT4)input[j+3]) &lt;&lt; 24);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void MD5Transform (UINT4 state[4], unsigned char block[64]) &#123;</span><br><span class="line">UINT4 a &#x3D; state[0], b &#x3D; state[1], c &#x3D; state[2], d &#x3D; state[3], x[16];</span><br><span class="line">Decode (x, block, 64);</span><br><span class="line">FF (a, b, c, d, x[ 0], S11, 0xd76aa478);</span><br><span class="line">FF (d, a, b, c, x[ 1], S12, 0xe8c7b756);</span><br><span class="line">FF (c, d, a, b, x[ 2], S13, 0x242070db);</span><br><span class="line">FF (b, c, d, a, x[ 3], S14, 0xc1bdceee);</span><br><span class="line">FF (a, b, c, d, x[ 4], S11, 0xf57c0faf);</span><br><span class="line">FF (d, a, b, c, x[ 5], S12, 0x4787c62a);</span><br><span class="line">FF (c, d, a, b, x[ 6], S13, 0xa8304613);</span><br><span class="line">FF (b, c, d, a, x[ 7], S14, 0xfd469501);</span><br><span class="line">FF (a, b, c, d, x[ 8], S11, 0x698098d8);</span><br><span class="line">FF (d, a, b, c, x[ 9], S12, 0x8b44f7af);</span><br><span class="line">FF (c, d, a, b, x[10], S13, 0xffff5bb1);</span><br><span class="line">FF (b, c, d, a, x[11], S14, 0x895cd7be);</span><br><span class="line">FF (a, b, c, d, x[12], S11, 0x6b901122);</span><br><span class="line">FF (d, a, b, c, x[13], S12, 0xfd987193);</span><br><span class="line">FF (c, d, a, b, x[14], S13, 0xa679438e);</span><br><span class="line">FF (b, c, d, a, x[15], S14, 0x49b40821);</span><br><span class="line">GG (a, b, c, d, x[ 1], S21, 0xf61e2562);</span><br><span class="line">GG (d, a, b, c, x[ 6], S22, 0xc040b340);</span><br><span class="line">GG (c, d, a, b, x[11], S23, 0x265e5a51);</span><br><span class="line">GG (b, c, d, a, x[ 0], S24, 0xe9b6c7aa);</span><br><span class="line">GG (a, b, c, d, x[ 5], S21, 0xd62f105d);</span><br><span class="line">GG (d, a, b, c, x[10], S22,   0x2441453);</span><br><span class="line">GG (c, d, a, b, x[15], S23, 0xd8a1e681);</span><br><span class="line">GG (b, c, d, a, x[ 4], S24, 0xe7d3fbc8);</span><br><span class="line">GG (a, b, c, d, x[ 9], S21, 0x21e1cde6);</span><br><span class="line">GG (d, a, b, c, x[14], S22, 0xc33707d6);</span><br><span class="line">GG (c, d, a, b, x[ 3], S23, 0xf4d50d87);</span><br><span class="line">GG (b, c, d, a, x[ 8], S24, 0x455a14ed);</span><br><span class="line">GG (a, b, c, d, x[13], S21, 0xa9e3e905);</span><br><span class="line">GG (d, a, b, c, x[ 2], S22, 0xfcefa3f8);</span><br><span class="line">GG (c, d, a, b, x[ 7], S23, 0x676f02d9);</span><br><span class="line">GG (b, c, d, a, x[12], S24, 0x8d2a4c8a);</span><br><span class="line">HH (a, b, c, d, x[ 5], S31, 0xfffa3942);</span><br><span class="line">HH (d, a, b, c, x[ 8], S32, 0x8771f681);</span><br><span class="line">HH (c, d, a, b, x[11], S33, 0x6d9d6122);</span><br><span class="line">HH (b, c, d, a, x[14], S34, 0xfde5380c);</span><br><span class="line">HH (a, b, c, d, x[ 1], S31, 0xa4beea44);</span><br><span class="line">HH (d, a, b, c, x[ 4], S32, 0x4bdecfa9);</span><br><span class="line">HH (c, d, a, b, x[ 7], S33, 0xf6bb4b60);</span><br><span class="line">HH (b, c, d, a, x[10], S34, 0xbebfbc70);</span><br><span class="line">HH (a, b, c, d, x[13], S31, 0x289b7ec6);</span><br><span class="line">HH (d, a, b, c, x[ 0], S32, 0xeaa127fa);</span><br><span class="line">HH (c, d, a, b, x[ 3], S33, 0xd4ef3085);</span><br><span class="line">HH (b, c, d, a, x[ 6], S34,   0x4881d05);</span><br><span class="line">HH (a, b, c, d, x[ 9], S31, 0xd9d4d039);</span><br><span class="line">HH (d, a, b, c, x[12], S32, 0xe6db99e5);</span><br><span class="line">HH (c, d, a, b, x[15], S33, 0x1fa27cf8);</span><br><span class="line">HH (b, c, d, a, x[ 2], S34, 0xc4ac5665);</span><br><span class="line">II (a, b, c, d, x[ 0], S41, 0xf4292244);</span><br><span class="line">II (d, a, b, c, x[ 7], S42, 0x432aff97);</span><br><span class="line">II (c, d, a, b, x[14], S43, 0xab9423a7);</span><br><span class="line">II (b, c, d, a, x[ 5], S44, 0xfc93a039);</span><br><span class="line">II (a, b, c, d, x[12], S41, 0x655b59c3);</span><br><span class="line">II (d, a, b, c, x[ 3], S42, 0x8f0ccc92);</span><br><span class="line">II (c, d, a, b, x[10], S43, 0xffeff47d);</span><br><span class="line">II (b, c, d, a, x[ 1], S44, 0x85845dd1);</span><br><span class="line">II (a, b, c, d, x[ 8], S41, 0x6fa87e4f);</span><br><span class="line">II (d, a, b, c, x[15], S42, 0xfe2ce6e0);</span><br><span class="line">II (c, d, a, b, x[ 6], S43, 0xa3014314);</span><br><span class="line">II (b, c, d, a, x[13], S44, 0x4e0811a1);</span><br><span class="line">II (a, b, c, d, x[ 4], S41, 0xf7537e82);</span><br><span class="line">II (d, a, b, c, x[11], S42, 0xbd3af235);</span><br><span class="line">II (c, d, a, b, x[ 2], S43, 0x2ad7d2bb);</span><br><span class="line">II (b, c, d, a, x[ 9], S44, 0xeb86d391);</span><br><span class="line">state[0] +&#x3D; a;</span><br><span class="line">state[1] +&#x3D; b;</span><br><span class="line">state[2] +&#x3D; c;</span><br><span class="line">state[3] +&#x3D; d;</span><br><span class="line">memset ((POINTER)x, 0, sizeof (x));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void MD5Init(MD5_CTX *context) &#123;</span><br><span class="line">context-&gt;count[0] &#x3D; context-&gt;count[1] &#x3D; 0;</span><br><span class="line">context-&gt;state[0] &#x3D; 0x67452301;</span><br><span class="line">context-&gt;state[1] &#x3D; 0xefcdab89;</span><br><span class="line">context-&gt;state[2] &#x3D; 0x98badcfe;</span><br><span class="line">context-&gt;state[3] &#x3D; 0x10325476;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void MD5Update(MD5_CTX *context, unsigned char *input, unsigned int inputLen) &#123;</span><br><span class="line">unsigned int i, index, partLen;</span><br><span class="line"></span><br><span class="line">index &#x3D; (unsigned int)((context-&gt;count[0] &gt;&gt; 3) &amp; 0x3F);</span><br><span class="line">if ((context-&gt;count[0] +&#x3D; ((UINT4)inputLen &lt;&lt; 3))</span><br><span class="line">        &lt; ((UINT4)inputLen &lt;&lt; 3))</span><br><span class="line">context-&gt;count[1]++;</span><br><span class="line">context-&gt;count[1] +&#x3D; ((UINT4)inputLen &gt;&gt; 29);</span><br><span class="line"></span><br><span class="line">partLen &#x3D; 64 - index;</span><br><span class="line"></span><br><span class="line">if (inputLen &gt;&#x3D; partLen) &#123;</span><br><span class="line">memcpy((POINTER)&amp;context-&gt;buffer[index], (POINTER)input, partLen);</span><br><span class="line">MD5Transform(context-&gt;state, context-&gt;buffer);</span><br><span class="line"></span><br><span class="line">for (i &#x3D; partLen; i + 63 &lt; inputLen; i +&#x3D; 64)</span><br><span class="line">MD5Transform (context-&gt;state, &amp;input[i]);</span><br><span class="line">index &#x3D; 0;</span><br><span class="line">&#125; else</span><br><span class="line">i &#x3D; 0;</span><br><span class="line"></span><br><span class="line">memcpy((POINTER)&amp;context-&gt;buffer[index], (POINTER)&amp;input[i], inputLen-i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">inline void MD5Final(unsigned char digest[16], MD5_CTX *context) &#123;</span><br><span class="line">unsigned char bits[8];</span><br><span class="line">unsigned int index, padLen;</span><br><span class="line"></span><br><span class="line">Encode (bits, context-&gt;count, 8);</span><br><span class="line">index &#x3D; (unsigned int)((context-&gt;count[0] &gt;&gt; 3) &amp; 0x3f);</span><br><span class="line">padLen &#x3D; (index &lt; 56) ? (56 - index) : (120 - index);</span><br><span class="line">MD5Update (context, PADDING, padLen);</span><br><span class="line">MD5Update (context, bits, 8);</span><br><span class="line">Encode (digest, context-&gt;state, 16);</span><br><span class="line">memset ((POINTER)context, 0, sizeof (*context));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void MD5Digest(char *pszInput, unsigned long nInputSize, char *pszOutPut) &#123;</span><br><span class="line">MD5_CTX context;</span><br><span class="line"></span><br><span class="line">MD5Init (&amp;context);</span><br><span class="line">MD5Update (&amp;context, (unsigned char *)pszInput, nInputSize);</span><br><span class="line">MD5Final ((unsigned char *)pszOutPut, &amp;context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#define MAX_SIZE (1024*1024)</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">char szDigest[16];</span><br><span class="line">char encrypt[MAX_SIZE];</span><br><span class="line"></span><br><span class="line">FILE *fp &#x3D; fopen(&quot;.&#x2F;test.txt&quot;, &quot;rb&quot;);</span><br><span class="line">if(fp &#x3D;&#x3D; NULL) &#123;</span><br><span class="line">printf(&quot;can not open file\n&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fseek(fp, 0, SEEK_END);</span><br><span class="line"></span><br><span class="line">int size &#x3D; ftell(fp);</span><br><span class="line"></span><br><span class="line">fseek(fp, 0, SEEK_SET);</span><br><span class="line"></span><br><span class="line">memset(encrypt, 0, sizeof(encrypt));</span><br><span class="line">int len &#x3D; fread(encrypt, sizeof(char), size, fp);</span><br><span class="line">printf(&quot;size:%d,len:%d\n&quot;, size, len);</span><br><span class="line"></span><br><span class="line">printf(&quot;\nencrytion:&quot;);</span><br><span class="line">MD5Digest(encrypt, size,szDigest);</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line">for (i&#x3D;0; i&lt;16; i++)</span><br><span class="line">printf (&quot;%02X&quot;,(unsigned char)szDigest[i]);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;getchar();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-KMP</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-KMP/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-KMP/</url>
      
        <content type="html"><![CDATA[<h4><span id="kmp字符串匹配算法">KMP(字符串匹配算法)</span></h4><p><strong>理解：KMP算法是优化的字符串匹配算法，核心是通过利用匹配失败后的信息，尽量减少要查询的字符串与模板字符串的比较。</strong></p><p><strong>重点：KMP算法的核心在于利用匹配失败后的信息，那么如何利用这些信息时重点。构造要查询字符串的前缀表，记录要查询字符串的前后重复的字符。</strong></p><span id="more"></span><p><strong>如图所示：</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-KMP/12.jpg" alt="12"></p><p><strong>寻找字符串中前后缀相同的数量。填入前缀表，最后一个不要，整体右移一位。即：</strong></p><table><thead><tr><th><strong>下标</strong></th><th><strong>0</strong></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th></tr></thead><tbody><tr><td><strong>值</strong></td><td><strong>a</strong></td><td><strong>b</strong></td><td><strong>a</strong></td><td><strong>b</strong></td><td><strong>c</strong></td></tr><tr><td><strong>前缀表</strong></td><td><strong>-1</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>2</strong></td></tr></tbody></table><p><strong>这样做的理由是，如果字符串比较失败后，可以根据前后缀一样的特点，直接跳过后面与前面一样的部分，不在比较。如 ababc 要与baabababc比较，第一次比较如表：</strong></p><table><thead><tr><th></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>c</strong></th></tr></thead><tbody><tr><td><strong>下标</strong></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>2</strong></td><td><strong>3</strong></td><td><strong>4</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>值</strong></td><td><strong>a</strong></td><td><strong>b</strong></td><td><strong>a</strong></td><td><strong>b</strong></td><td><strong>c</strong></td><td></td><td></td><td></td><td></td></tr><tr><td><strong>前缀表</strong></td><td><strong>-1</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>2</strong></td><td></td><td></td><td></td><td></td></tr></tbody></table><p><strong>第一次比较前四个都能匹配最后一个c不能匹配，c对应的前缀表值为2，就让a[2]移动到原先c的位置，因为前缀表的2，表示abab的前后2个字符串一样，这样就不必重复比较，所以第二次比较如下表：</strong></p><table><thead><tr><th></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>c</strong></th></tr></thead><tbody><tr><td><strong>下标</strong></td><td></td><td></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>2</strong></td><td><strong>3</strong></td><td><strong>4</strong></td><td></td><td></td></tr><tr><td><strong>值</strong></td><td></td><td></td><td><strong>a</strong></td><td><strong>b</strong></td><td><strong>a</strong></td><td><strong>b</strong></td><td><strong>c</strong></td><td></td><td></td></tr><tr><td><strong>前缀表</strong></td><td></td><td></td><td><strong>-1</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>2</strong></td><td></td><td></td></tr></tbody></table><p><strong>KMP算法就是依照这样的方法提高字符串的匹配效率。</strong></p><p><strong>示例：a[]=”BABCABAA”,匹配文本 text[]=”ABABCEABABCABAAADDB”</strong></p><p><strong>示例代码：kmp.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">&#x2F;&#x2F;ҪƥŤז·û´®µć°׺±�</span><br><span class="line">void prefix_table(char pattern[],int prefix[],int n)&#123;</span><br><span class="line">prefix[0]&#x3D;0;</span><br><span class="line">int len &#x3D; 0;</span><br><span class="line">int i&#x3D; 1;</span><br><span class="line">while (i&lt;n)&#123;</span><br><span class="line">if(pattern[i] &#x3D;&#x3D; pattern[len])&#123;</span><br><span class="line">len ++;</span><br><span class="line">prefix[i]&#x3D;len;</span><br><span class="line">i++; </span><br><span class="line">&#125;else&#123;</span><br><span class="line">if(len&gt;0)</span><br><span class="line">len &#x3D; prefix[len-1];</span><br><span class="line">else&#123;</span><br><span class="line">prefix[i]&#x3D;0;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">void move_prefix_table(int prefix[],int n)&#123;</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;n-1;i&gt;0;i--)&#123;</span><br><span class="line">prefix[i]&#x3D;prefix[i-1];</span><br><span class="line">&#125;</span><br><span class="line">prefix[0]&#x3D;-1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void kmp_search(char text[],char pattern[])&#123;</span><br><span class="line">int n &#x3D; strlen(pattern);</span><br><span class="line">int m &#x3D; strlen(text);</span><br><span class="line">int* prefix&#x3D;(int*)malloc(sizeof(int) * n);</span><br><span class="line">prefix_table(pattern,prefix,n);</span><br><span class="line">move_prefix_table(prefix,n);</span><br><span class="line"></span><br><span class="line">int i&#x3D;0;</span><br><span class="line">int j&#x3D;0;</span><br><span class="line">while(i&lt;m)&#123;</span><br><span class="line">if(j&#x3D;&#x3D;n-1&amp;&amp;text[i]&#x3D;&#x3D;pattern[j])&#123;</span><br><span class="line">printf(&quot;Found pattern at %d\n&quot;,i-j+1);</span><br><span class="line">j&#x3D;prefix[j];</span><br><span class="line">&#125;</span><br><span class="line">if(text[i]&#x3D;&#x3D;pattern[j])&#123;</span><br><span class="line">i++;j++;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">j&#x3D;prefix[j];</span><br><span class="line">if(j&#x3D;&#x3D;-1)&#123;</span><br><span class="line">i++;j++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">char pattern[]&#x3D;&quot;BABCABAA&quot;;</span><br><span class="line">char text[]&#x3D;&quot;ABABCEABABCABAAADDB&quot;;</span><br><span class="line">kmp_search(text,pattern);</span><br><span class="line">&#x2F;*int prefix[9];</span><br><span class="line">int n&#x3D;9;</span><br><span class="line">prefiex_table(pattern,prefix,n);</span><br><span class="line">move_prefix_table(prefix,9);</span><br><span class="line">for(int i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">printf(&quot;%d &quot;,prefix[i]);</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>暴力字符串匹配示例代码：kmp0.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int t;</span><br><span class="line">bool check(char a[],char b[],int s1,int n,int s2,int m)&#123;</span><br><span class="line">int l&#x3D;s1;</span><br><span class="line">t&#x3D;0;</span><br><span class="line">for(int i&#x3D;s2;i&lt;&#x3D;m;i++)&#123;</span><br><span class="line">if(a[l]&#x3D;&#x3D;b[i])</span><br><span class="line">t++;l++;</span><br><span class="line">&#125;</span><br><span class="line">if(t&#x3D;&#x3D;l) return true;</span><br><span class="line">if(l&#x3D;&#x3D;m) return false;</span><br><span class="line">check(a,b,s1+1,n,s2,m);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">char a[n];</span><br><span class="line">for(int i&#x3D;0;i&lt;&#x3D;n;i++)</span><br><span class="line">a[i]&#x3D;getchar();</span><br><span class="line"></span><br><span class="line">int m;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;m);</span><br><span class="line">char b[m];</span><br><span class="line">for(int i&#x3D;0;i&lt;&#x3D;m;i++)</span><br><span class="line">b[m]&#x3D;getchar();</span><br><span class="line"></span><br><span class="line">if(check(a,b,0,n,0,m))</span><br><span class="line">printf(&quot;true&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;false&quot;);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-最小生成树</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h4><span id="最小生成树">最小生成树</span></h4><p><strong>概念：保持图连通的最少边的树称为生成树，n个结点的生成树，有n-1条边，当边的权值和最小称为最小生成树，也称最小权值生成树。</strong></p><span id="more"></span><h4><span id="并查集">并查集</span></h4><p><strong>概念：并查集是一种树型的数据结构，用于处理一些不相交</strong><a href="https://baike.baidu.com/item/%E9%9B%86%E5%90%88/2908117"><strong>集合</strong></a><strong>（Disjoint Sets）的合并及查询问题。常常在使用中以森林来表示。</strong></p><p><strong>理解：并查集，集指集合；查指查找元素所在的集合，即元素最终的根节点；并将两个元素所在的集合合并为一个集合，前提需要判断两个元素是否属于同一个集合。</strong></p><p><strong>示例：检查一个图中存不存在环如图：</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E6%9C%80%E5%B0%8F%E7%94%9F%E6%88%90%E6%A0%91/8.1.png" alt="8.1"></p><p><strong>过程：创建一个数组parent[]表示该结点的父节点如表所示</strong></p><table><thead><tr><th><strong>结点</strong></th><th><strong>0</strong></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th><th><strong>5</strong></th></tr></thead><tbody><tr><td><strong>Parent</strong></td><td><strong>1</strong></td><td><strong>-1</strong></td><td><strong>1</strong></td><td><strong>1</strong></td><td><strong>3</strong></td><td><strong>2</strong></td></tr></tbody></table><p><strong>创建parent[]数组是为了查找某一节点的根节点是哪个，这样就可以判断任意两个结点在不在同一集合里，因为我们只需要一层层查找他们的根节点，找到最终的根节点，判断是否相同就行了。相同说明这两个结点在同一个集合里。创建一个find_root()函数查找节点的最终根节点。</strong></p><p><strong>若将俩个集合合并在一起，只需要将两个集合的根节点任意一个设置为另一个的根节点就行了。</strong></p><p><strong>压缩路径：为了使树的高度不呈直线的形式上升，压缩路径。但合并集合时，比较x和y节点集合树的高度，高度低的一方向高度高的一方合并。</strong></p><p><strong>示例代码:union.cpp union2.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;顶点的数量 </span><br><span class="line">#define VERTICES 6</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化parent[]数组 </span><br><span class="line">int initialise(int parent[])&#123;</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;VERTICES;i++)&#123;</span><br><span class="line">parent[i]&#x3D;-1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;查找顶点</span><br><span class="line">int find_root(int x,int parent[]) &#123;</span><br><span class="line">int x_root&#x3D;x;</span><br><span class="line">while(parent[x_root]!&#x3D;-1)&#123;</span><br><span class="line">x_root&#x3D;parent[x_root];</span><br><span class="line">&#125;</span><br><span class="line">return x_root;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;合并两个集合 返回1成功，返回0合并失败（两个顶点在一个集合中） </span><br><span class="line">int union_vertices(int x,int y,int parent[]) &#123;</span><br><span class="line">int x_root&#x3D;find_root(x,parent);</span><br><span class="line">int y_root&#x3D;find_root(y,parent);</span><br><span class="line">if(x_root&#x3D;&#x3D;y_root) &#123;&#x2F;&#x2F;如果两个结点的根是同一个 </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;&#x2F;&#x2F;否则将两树合并成一个树 </span><br><span class="line">parent[x_root]&#x3D;y_root; </span><br><span class="line">return 1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int parent[VERTICES]&#x3D;&#123;0&#125;;</span><br><span class="line">&#x2F;&#x2F;图 6条边，每条边连接两个顶点 </span><br><span class="line">int edges[5][2]&#x3D;&#123;</span><br><span class="line">&#123;0,1&#125;,&#123;1,2&#125;,&#123;1,3&#125;,&#123;3,4&#125;,&#123;2,5&#125;</span><br><span class="line">&#125; ;</span><br><span class="line"></span><br><span class="line">initialise(parent);&#x2F;&#x2F;初始化parent数组，全为-1 </span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;5;i++)&#123;</span><br><span class="line">int x &#x3D; edges[i][0];</span><br><span class="line">int y &#x3D; edges[i][1];</span><br><span class="line"></span><br><span class="line">if(union_vertices(x,y,parent)&#x3D;&#x3D;0)&#123;</span><br><span class="line">printf(&quot;Cycle existence!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;No Cycle found!&quot;) ;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>示例代码:union2.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;顶点的数量 </span><br><span class="line">#define VERTICES 6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化parent[]数组 rank[]记录数的高度 </span><br><span class="line">int initialise(int parent[],int rank[])&#123;</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;VERTICES;i++)&#123;</span><br><span class="line">parent[i]&#x3D;-1;</span><br><span class="line">rank[i]&#x3D;0; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;查找顶点</span><br><span class="line">int find_root(int x,int parent[]) &#123;</span><br><span class="line">int x_root&#x3D;x;</span><br><span class="line">while(parent[x_root]!&#x3D;-1)&#123;</span><br><span class="line">x_root&#x3D;parent[x_root];</span><br><span class="line">&#125;</span><br><span class="line">return x_root;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;合并两个集合 返回1成功，返回0合并失败（两个顶点在一个集合中） </span><br><span class="line">int union_vertices(int x,int y,int parent[],int rank[]) &#123;</span><br><span class="line">int x_root&#x3D;find_root(x,parent);</span><br><span class="line">int y_root&#x3D;find_root(y,parent);</span><br><span class="line">if(x_root&#x3D;&#x3D;y_root) &#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">&#x2F;&#x2F;压缩路径 </span><br><span class="line">if(rank[x_root]&gt;rank[y_root])&#123;</span><br><span class="line">parent[y_root]&#x3D;x_root; </span><br><span class="line">&#125;else&#123;</span><br><span class="line">if(rank[y_root]&gt;rank[x_root])&#123;</span><br><span class="line">parent[x_root]&#x3D;y_root;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">parent[x_root]&#x3D;y_root;</span><br><span class="line">rank[y_root]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int parent[VERTICES];</span><br><span class="line">int rank[VERTICES];</span><br><span class="line">&#x2F;&#x2F;图 6条边，每条边连接两个顶点 </span><br><span class="line">int edges[6][2]&#x3D;&#123;</span><br><span class="line">&#123;0,1&#125;,&#123;1,2&#125;,&#123;1,3&#125;,&#123;3,4&#125;,&#123;2,5&#125;,&#123;5,4&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">initialise(parent,rank);</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;0;i&lt;6;i++)&#123;</span><br><span class="line">int x &#x3D; edges[i][0];</span><br><span class="line">int y &#x3D; edges[i][1];</span><br><span class="line"></span><br><span class="line">if(union_vertices(x,y,parent,rank)&#x3D;&#x3D;0)&#123;</span><br><span class="line">printf(&quot;Cycle existence!&quot;);</span><br><span class="line">exit(0);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;No Cycle found!&quot;) ;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-全排列</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h4><span id="全排列">全排列</span></h4><p><strong>概念</strong>：<strong>从n个不同元素中任取m（m≤n）个元素，按照一定的顺序排列起来，叫做从n个不同元素中取出m个元素的一个排列。当m=n时所有的排列情况叫全排列。</strong></p><span id="more"></span><p><strong>示例：对a[1,2,3,4,5]进行全排列</strong></p><p><strong>分析过程：全排列：如 对1，2，3，4，5全排列，先取出其中任意一个数如1，然后对其他的数全排列，再取出除1之外的任意一个数，然后对其他的数全排列，依次这样下去，直到五个数取完为止 。</strong></p><p><strong>示例代码：premutation.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">全排列：如 对1，2，3，4，5全排列</span><br><span class="line">先取出其中任意一个数如1，然后对其他的数全排列</span><br><span class="line">再取出除1之外的任意一个数，然后对其他的数全排列</span><br><span class="line">依次这样下去，直到五个数取完为止 </span><br><span class="line">*&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;交换值 </span><br><span class="line">void swap(int a[],int p,int q) &#123;</span><br><span class="line">int temp&#x3D; a[p];</span><br><span class="line">a[p]&#x3D;a[q];</span><br><span class="line">a[q]&#x3D;temp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出 </span><br><span class="line">void print(int a[],int n) &#123;</span><br><span class="line">for(int i&#x3D;0; i&lt;n; i++) &#123;</span><br><span class="line">printf(&quot;%d&quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;全排列 </span><br><span class="line">void perm(int a[],int p,int q) &#123;</span><br><span class="line">int j;</span><br><span class="line">&#x2F;&#x2F;直到取到结束下标为止 </span><br><span class="line">if(q&#x3D;&#x3D;p) &#123;</span><br><span class="line">print(a,q+1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F;重复的数不必再排列 </span><br><span class="line">for(int i&#x3D;p; i&lt;&#x3D;q; i++) &#123;</span><br><span class="line">for(j &#x3D; p; j &lt; i; j++) &#123;</span><br><span class="line">if(a[j] &#x3D;&#x3D; a[i]) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(i &#x3D;&#x3D; j) &#123;</span><br><span class="line">swap(a,p,i);&#x2F;&#x2F;交换数据 </span><br><span class="line">perm(a,p+1,q);&#x2F;&#x2F;对剩余的数进行全排列 </span><br><span class="line">swap(a,p,i);&#x2F;&#x2F;交换回来 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void perm2(int a[],int p,int q) &#123;</span><br><span class="line">int j;</span><br><span class="line">if(q&#x3D;&#x3D;p) &#123;</span><br><span class="line">print(a,q+1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">for(int i&#x3D;p; i&lt;&#x3D;q; i++) &#123;</span><br><span class="line">swap(a,p,i);</span><br><span class="line">perm(a,p+1,q);</span><br><span class="line">swap(a,p,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">printf(&quot;请输入数据个数：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">int a[n]; </span><br><span class="line">printf(&quot;\n请输入数据：&quot;);</span><br><span class="line">for(int i&#x3D;0; i&lt;n; i++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">perm(a,0,n-1);printf(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;) ;</span><br><span class="line"></span><br><span class="line">perm2(a,0,n-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：对b[1,1,2,3,4]进行全排列</strong></p><p><strong>分析过程：重复数据，如果有重复数据则不必再全排列</strong></p><p><strong>示例代码：premutation.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">全排列：如 对1，2，3，4，5全排列</span><br><span class="line">先取出其中任意一个数如1，然后对其他的数全排列</span><br><span class="line">再取出除1之外的任意一个数，然后对其他的数全排列</span><br><span class="line">依次这样下去，直到五个数取完为止 </span><br><span class="line">*&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;交换值 </span><br><span class="line">void swap(int a[],int p,int q) &#123;</span><br><span class="line">int temp&#x3D; a[p];</span><br><span class="line">a[p]&#x3D;a[q];</span><br><span class="line">a[q]&#x3D;temp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出 </span><br><span class="line">void print(int a[],int n) &#123;</span><br><span class="line">for(int i&#x3D;0; i&lt;n; i++) &#123;</span><br><span class="line">printf(&quot;%d&quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;全排列 </span><br><span class="line">void perm(int a[],int p,int q) &#123;</span><br><span class="line">int j;</span><br><span class="line">&#x2F;&#x2F;直到取到结束下标为止 </span><br><span class="line">if(q&#x3D;&#x3D;p) &#123;</span><br><span class="line">print(a,q+1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">&#x2F;&#x2F;重复的数不必再排列 </span><br><span class="line">for(int i&#x3D;p; i&lt;&#x3D;q; i++) &#123;</span><br><span class="line">for(j &#x3D; p; j &lt; i; j++) &#123;</span><br><span class="line">if(a[j] &#x3D;&#x3D; a[i]) &#123;</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if(i &#x3D;&#x3D; j) &#123;</span><br><span class="line">swap(a,p,i);&#x2F;&#x2F;交换数据 </span><br><span class="line">perm(a,p+1,q);&#x2F;&#x2F;对剩余的数进行全排列 </span><br><span class="line">swap(a,p,i);&#x2F;&#x2F;交换回来 </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void perm2(int a[],int p,int q) &#123;</span><br><span class="line">int j;</span><br><span class="line">if(q&#x3D;&#x3D;p) &#123;</span><br><span class="line">print(a,q+1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">for(int i&#x3D;p; i&lt;&#x3D;q; i++) &#123;</span><br><span class="line">swap(a,p,i);</span><br><span class="line">perm(a,p+1,q);</span><br><span class="line">swap(a,p,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int n;</span><br><span class="line">printf(&quot;请输入数据个数：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">int a[n]; </span><br><span class="line">printf(&quot;\n请输入数据：&quot;);</span><br><span class="line">for(int i&#x3D;0; i&lt;n; i++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">perm(a,0,n-1);printf(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&quot;) ;</span><br><span class="line"></span><br><span class="line">perm2(a,0,n-1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-贪心</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E8%B4%AA%E5%BF%83/</url>
      
        <content type="html"><![CDATA[<h4><span id="贪心">贪心</span></h4><p><strong>前提：问题的全局最优解可以通过一步步获得多个局部最优解获得，问题必须具备无后效性，即某个状态以前的过程不会影响以后的状态，只与当前状态有关。</strong></p><p><strong>基本思想：根据某个优化策略，每一步确保获得局部最优解，直至达到终止条件。</strong></p><span id="more"></span><p><strong>示例：背包问题。有一个背包，背包容量是M=19kg。有6个物品，物品可以分割成任意大小。要求尽可能让装入背包中的物品总价值最大，但不能超过总容量。</strong></p><p><strong>物品 A B C D E F</strong></p><p><strong>重量 2kg 6kg 7kg 4kg 10kg 3kg价值 8$ 1$ 9$ 4$ 2$ 4$</strong></p><p><strong>分析：每次优先装载单位重量价值最大的物品</strong></p><p><strong>示例代码：greedy.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;背包问题，可分割（贪心算法） </span><br><span class="line">&#x2F;&#x2F;背包能装mkg,总共有n个物品，每个物品价值不同，物质可以分割  </span><br><span class="line">&#x2F;*</span><br><span class="line">6 19 </span><br><span class="line">2 8 </span><br><span class="line">6 1 </span><br><span class="line">7 9</span><br><span class="line">4 3</span><br><span class="line">10 2</span><br><span class="line">3 4</span><br><span class="line">*&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">void swap(int n,int m)&#123;</span><br><span class="line">int temp;</span><br><span class="line">temp&#x3D;n;</span><br><span class="line">n&#x3D;m;</span><br><span class="line">m&#x3D;temp;</span><br><span class="line">&#125;</span><br><span class="line">void sort(int n,float arr[],int a[],int b[])&#123;</span><br><span class="line">float temp;</span><br><span class="line">int temp1;int temp2;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">for(int j&#x3D;0;j&lt;n-i-1;j++)&#123;</span><br><span class="line">if(arr[j]&lt;arr[j+1])&#123;</span><br><span class="line">temp&#x3D;arr[j];</span><br><span class="line">arr[j]&#x3D;arr[j+1];</span><br><span class="line">arr[j+1]&#x3D;temp;</span><br><span class="line">temp1&#x3D;a[j];</span><br><span class="line">a[j]&#x3D;a[j+1];</span><br><span class="line">a[j+1]&#x3D;temp1;</span><br><span class="line">temp2&#x3D;b[j];</span><br><span class="line">b[j]&#x3D;b[j+1];</span><br><span class="line">b[j+1]&#x3D;temp2;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">float greedy(int n,int m,int a[],int b[])&#123;</span><br><span class="line">float c[n],sum&#x3D;0;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">c[i]&#x3D;float(b[i])&#x2F;float(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;根据物品单位重量价值从大到小排序 </span><br><span class="line">sort(n,c,a,b);</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">printf(&quot;%d %d %.2f\n&quot;,a[i],b[i],c[i]);</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">if(m&gt;&#x3D;a[i]) &#123; &#x2F;&#x2F;如果物品重量小于背包剩余承重 </span><br><span class="line">m&#x3D;m-a[i]; &#x2F;&#x2F;装载物品后，背包剩余重量 </span><br><span class="line">sum&#x3D;sum+b[i]; &#x2F;&#x2F;背包物品的总价值 </span><br><span class="line">&#125;else&#123;            &#x2F;&#x2F;物品重量大于背包剩余承重 </span><br><span class="line">sum &#x3D; sum+m*c[i];</span><br><span class="line">break; </span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">return sum;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">int n,m;</span><br><span class="line">printf(&quot;请输入物品数量：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n); </span><br><span class="line">printf(&quot;请输入背包承重：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;m); </span><br><span class="line"></span><br><span class="line">int a[n],b[n];&#x2F;&#x2F;a[n]：物品重量；b[n]: 物品价值 </span><br><span class="line"></span><br><span class="line">printf(&quot;请输入物品重量和价值：\n&quot;);</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;a[i],&amp;b[i]);</span><br><span class="line">float sum &#x3D; greedy(n,m,a,b);</span><br><span class="line">printf(&quot;%.2f&quot;,sum);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>示例：****用贪心算法解决活动安排问题：设有待安排的 10 项活动，都要使用某一公共资源，每项活动的开始时间和结束时间如下表所示</strong></p><table><thead><tr><th></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th><th><strong>5</strong></th><th><strong>6</strong></th><th><strong>7</strong></th><th><strong>8</strong></th><th><strong>9</strong></th><th><strong>10</strong></th></tr></thead><tbody><tr><td><strong>开始时间</strong></td><td><strong>3</strong></td><td><strong>0</strong></td><td><strong>9</strong></td><td><strong>1</strong></td><td><strong>10</strong></td><td><strong>11</strong></td><td><strong>2</strong></td><td><strong>5</strong></td><td><strong>3</strong></td><td><strong>4</strong></td></tr><tr><td><strong>结束时间</strong></td><td><strong>8</strong></td><td><strong>6</strong></td><td><strong>13</strong></td><td><strong>4</strong></td><td><strong>13</strong></td><td><strong>12</strong></td><td><strong>3</strong></td><td><strong>10</strong></td><td><strong>5</strong></td><td><strong>9</strong></td></tr></tbody></table><p><strong>求安装排最多的活动。</strong></p><p><strong>分析：每次选择结束最早的活动，就能保住安排尽可能多的活动。先对每个活动安照结束时间排序，下一次选择的活动的开始时间必须不小于上一次活动的结束时间，按照此条件，顺序地遍历按结束时间排序后的活动，挑选出满足start_time[i+1]&gt;=end_time[i]的活动。</strong></p><p><strong>示例代码：****greedy1.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*活动开始时间和结束时间 ，共十个活动 </span><br><span class="line">3 8</span><br><span class="line">0 6</span><br><span class="line">9 13</span><br><span class="line">1 4</span><br><span class="line">10 13</span><br><span class="line">11 12</span><br><span class="line">2 3</span><br><span class="line">5 10</span><br><span class="line">3 5</span><br><span class="line">4 9</span><br><span class="line">*&#x2F;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">struct action&#123;</span><br><span class="line">int start;&#x2F;&#x2F;活动开始时间 </span><br><span class="line">int end;&#x2F;&#x2F;活动结束时间 </span><br><span class="line">int index;&#x2F;&#x2F;活动编号 </span><br><span class="line">&#125;;</span><br><span class="line">bool cmp(const action &amp;a, const action &amp;b)</span><br><span class="line">&#123;</span><br><span class="line">    if (a.end&lt;&#x3D;b.end) return true;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">void greedy(int n,action a[])&#123;</span><br><span class="line">printf(&quot;\n按活动结束时间排序后：\n&quot;);</span><br><span class="line">for(int i&#x3D;0;i&lt;n-1;i++)&#123;</span><br><span class="line">printf(&quot;%d %d\n&quot;,a[i].start,a[i].end);</span><br><span class="line">&#125; </span><br><span class="line">int v &#x3D; 0;</span><br><span class="line">printf(&quot;\n%d %d\n&quot;,a[0].index,a[0].start,a[0].end);</span><br><span class="line">for(int i&#x3D;1;i&lt;n-1;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;如果下一个活动的开始时间不小于上一个活动的开始时间 </span><br><span class="line">if(a[i].start &gt;&#x3D; a[v].end)&#123;</span><br><span class="line">v&#x3D;i;</span><br><span class="line">printf(&quot;%d %d\n&quot;,a[i].start,a[i].end);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">action a[100];</span><br><span class="line">int n;</span><br><span class="line">cout&lt;&lt;&quot;请输入活动数量：&quot;; </span><br><span class="line">cin&gt;&gt;n;</span><br><span class="line">cout&lt;&lt;&quot;请输入活动的开始时间及结束时间：&quot;&lt;&lt;endl; </span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">cin&gt;&gt;a[i].start&gt;&gt;a[i].end;</span><br><span class="line">a[i].index&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">sort(a,a+n,cmp);</span><br><span class="line">greedy(n,a);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-二分查找</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h4><span id="二分查找">二分查找</span></h4><p><strong>前提条件：表中的数据是顺序存储结构</strong></p><p><strong>查找过程：首先，假设表中的数据是按升序排列，将表中的中间位置记录的数据与查找关键字比较，如果两者相等，则查找成功；否则利用中间位置记录的数据将表分成前后两个表，如果中间位置的数据大于要查找的关键字就查找前一个表，如果中间位置的数据大于要查找的关键字就查找后一个表；重复以上过程，直到查到满足条件的记录，就查找成功，否则要查找的数据不存在数据表中，查找不成功。</strong></p><span id="more"></span><p><strong>示例：在数组中查找值，返回下标</strong></p><p><strong>示例代码：binary_search.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> *二分查找</span><br><span class="line"> *要求数列是顺序存储结构 </span><br><span class="line">*&#x2F; </span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;数据 </span><br><span class="line">int a[6]&#x3D;&#123;2,8,16,34,51,67&#125;;</span><br><span class="line">&#x2F;&#x2F;要查找的数据 </span><br><span class="line">int x&#x3D;51;</span><br><span class="line">int binary_search(int s,int e)&#123;</span><br><span class="line">&#x2F;&#x2F;m:数组的中间位置 </span><br><span class="line">int m &#x3D;s+ (e-s)&#x2F;2;</span><br><span class="line">&#x2F;&#x2F;如果开始地址大于尾地址，数组查找完了 并没有找到值 </span><br><span class="line">if(s &gt; e)</span><br><span class="line">return -1;</span><br><span class="line">else &#123;</span><br><span class="line">&#x2F;&#x2F;如果中间位置的值等于要查询的值，就放回要查找的值在数组中的下标 </span><br><span class="line">if(a[m] &#x3D;&#x3D; x) </span><br><span class="line">return m;</span><br><span class="line">else if(a[m] &gt; x)&#x2F;&#x2F;如果中间位置的值大于要查询的值，就一中间位置划分数组，查询前一部分 </span><br><span class="line">return binary_search(s,m-1);</span><br><span class="line">else &#x2F;&#x2F;如果中间位置的值小于要查询的值，就一中间位置划分数组，查询后一部分 </span><br><span class="line">  return binary_search(m+1,e);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">&#x2F;&#x2F;调用二分查询 </span><br><span class="line">int m &#x3D; binary_search(0,5);</span><br><span class="line">if(m!&#x3D;-1)</span><br><span class="line">printf(&quot;查找成功，查找数据的下标为%d&quot;,m);</span><br><span class="line">else</span><br><span class="line">printf(&quot;查找失败，查找数据不存在&quot;);</span><br><span class="line">&#125; </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-Floyd</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-Floyd/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-Floyd/</url>
      
        <content type="html"><![CDATA[<h4><span id="floyd">Floyd</span></h4><p><strong>Flody算法：寻找给的定权图中节点间的最短路径。（插点法）</strong></p><p><strong>核心依据：以下图为例</strong></p><span id="more"></span><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-Floyd/7.1.png" alt="7.1"></p><p>①如果某个节点位于从起点到终点的最短路径上：</p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-Floyd/7.2.png" alt="7.2"></p><p>②如果某个节点不在从起点到终点的最短路径上：</p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-Floyd/7.3.png" alt="7.3"></p><p>由①转化为代码就是distance[i][k]+distance[k][j]&lt;distance[i][j]，即起始点到中间节点距离+中间节点到终点距离是否小于起始点到终点的距离（如果不能直接到达，初始化为无穷大），如果小于就更新起始点到终点的距离，即distance[i][j]=distance[i][k]+distance[k][j]，同时更新路径path[i][j]=path[i][k]。</p><p>示例分析：构建两个二维数组distance[5][5]，path[5][5]，distance[5][5]代表两个节点间的最短距离，path[5][5]代表最短路径。如下表所示：</p><table><thead><tr><th>D（节点）</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td>0</td><td>1</td><td>-3</td><td>2</td><td>-4</td></tr><tr><td>1</td><td>3</td><td>0</td><td>-4</td><td>1</td><td>-1</td></tr><tr><td>2</td><td>7</td><td>4</td><td>0</td><td>5</td><td>3</td></tr><tr><td>3</td><td>2</td><td>-1</td><td>-5</td><td>0</td><td>-2</td></tr><tr><td>4</td><td>8</td><td>5</td><td>1</td><td>6</td><td>0</td></tr></tbody></table><table><thead><tr><th>p（节点）</th><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th></tr></thead><tbody><tr><td>0</td><td>-1</td><td>4</td><td>4</td><td>4</td><td>4</td></tr><tr><td>1</td><td>3</td><td>-1</td><td>3</td><td>3</td><td>3</td></tr><tr><td>2</td><td>1</td><td>1</td><td>-1</td><td>1</td><td>1</td></tr><tr><td>3</td><td>0</td><td>2</td><td>2</td><td>-1</td><td>0</td></tr><tr><td>4</td><td>3</td><td>3</td><td>3</td><td>3</td><td>-1</td></tr></tbody></table><p>示例代码：<strong>flody.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*弗洛伊德算法（flody），求有向图最短路径问题*&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define F 90</span><br><span class="line">#define VERTICES 5 &#x2F;&#x2F;顶点个数 </span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化</span><br><span class="line">&#x2F;&#x2F;结点间的最短距离</span><br><span class="line">int distance[VERTICES][VERTICES]&#x3D; &#123;</span><br><span class="line">&#123;F,3,8,F,-4&#125;,</span><br><span class="line">&#123;F,F,F,1,7&#125;,</span><br><span class="line">&#123;F,4,F,F,F&#125;,</span><br><span class="line">&#123;2,F,-5,F,F&#125;,</span><br><span class="line">&#123;F,F,F,6,F&#125;</span><br><span class="line">&#125;;&#x2F;&#x2F;0代表到自身</span><br><span class="line">&#x2F;&#x2F;结点间最短距离的路径</span><br><span class="line">int path[VERTICES][VERTICES]&#x3D; &#123;</span><br><span class="line">&#123;-1,1,2,3,4&#125;,</span><br><span class="line">&#123;0,-1,2,3,4&#125;,</span><br><span class="line">&#123;0,1,-1,3,4&#125;,</span><br><span class="line">&#123;0,1,2,-1,4&#125;,</span><br><span class="line">&#123;0,1,2,3,-1&#125;</span><br><span class="line">&#125;; &#x2F;&#x2F;-1代表没有上一个节点</span><br><span class="line">int i,j,k;</span><br><span class="line">for(k&#x3D;0; k&lt;VERTICES; k++) &#123;</span><br><span class="line">for(i&#x3D;0; i&lt;VERTICES; i++)</span><br><span class="line">for(j&#x3D;0; j&lt;VERTICES; j++) &#123;</span><br><span class="line">if(distance[i][k]+distance[k][j]&lt;distance[i][j]) &#123;</span><br><span class="line">distance[i][j]&#x3D;distance[i][k]+distance[k][j];</span><br><span class="line">path[i][j]&#x3D;path[i][k];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int s, en;</span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;s,&amp;en);</span><br><span class="line">int f&#x3D;s;</span><br><span class="line">while (f!&#x3D;en) &#123;</span><br><span class="line"> printf(&quot;%d-&gt;&quot;,f);</span><br><span class="line"> f&#x3D;path[f][en];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;%d\n&quot;,en);</span><br><span class="line">printf(&quot;\n%d&quot;,distance[s][en]);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-Dijkstra</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-Dijkstra/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-Dijkstra/</url>
      
        <content type="html"><![CDATA[<h4><span id="dijkstra">Dijkstra</span></h4><p><strong>概念：狄克斯特拉算法，计算一个顶点到其余各顶点最短路径的算法。解决有权图中最短路径的问题。此算法基于广度优先搜索，以起始点为中心层层扩展，直至扩展到终点。</strong><span id="more"></span></p><p><strong>基本过程：引入一个辅助数组dist[]记录各个点到起始点的距离，开始初始化dist[],定义距离本身的距离为0，起始点下一层的顶点的距离为之间的权值，起始点到不与起始点相邻的顶点距离为无穷大。接着以起始点的下一层顶点向下遍历。目前我的感觉Dijkstra算法就是找出所有起始点到目标点的所有路径，比较出最短的那一条，即起始点到目标点的最短路径。</strong></p><p><strong>示例：如图所示的有向带权图</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-Dijkstra/6.1.png" alt="6.1"></p><p><strong>假设以v0为起始点求到个点的最短路径。定义辅助数组dist[]，path[]和set[]。path[]主要是记录路径的。Set[]用于标记顶点是否遍历。初始化数据</strong></p><table><thead><tr><th></th><th><strong>0</strong></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th><th><strong>5</strong></th><th><strong>6</strong></th></tr></thead><tbody><tr><td><strong>Dist[]</strong></td><td><strong>0</strong></td><td><strong>4</strong></td><td><strong>6</strong></td><td><strong>6</strong></td><td><strong>∞</strong></td><td><strong>∞</strong></td><td><strong>∞</strong></td></tr><tr><td><strong>Path[]</strong></td><td><strong>-1</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>-1</strong></td><td><strong>-1</strong></td><td><strong>-1</strong></td></tr><tr><td><strong>Set[]</strong></td><td><strong>1</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>0</strong></td></tr></tbody></table><p><strong>遍历起始点的下一层，v1到v2的距离为dist(v1,v2)=1，即v2经过v1距离起始点的距离为dist(v0,v1,v2)=5，而5&lt;dist(v0,v2)=6，那么更新数组dist[2]=5，path[2]=1；v1到v4的距离为dist(v1,v4)=7,即dist(v0,v1,v4)=11，更新dist[4]=11，path[4]=1；v1顶点结束，更新set[1]=1；以v2顶点向下遍历，dist(v2,v4)=6,即dist(v0,v1,v2,v4)=11不小于dist(v0,v1,v4)，不更新dist[4]；dist(v2,v5)=4，即dist(v0,v1,v2,v5)=9&lt;dist(v0,v2,v5)=10,更新dist[v5]=2，path[5]=9；v2结束，更新set[2]=1。以v3顶点向下遍历，dist(v3,v2)=2，即dist(v0,v3,v2)=8&gt;dist(v0,v1,v2)=5，不更新dist[2]；dist(v3,v5)=5，即dist(v0,v3,v5)=11&gt;dist(v0,v1,v2,v5)=9,不更新dist[5]；v3结束，更新set[3]=1。此时数据：</strong></p><table><thead><tr><th></th><th><strong>0</strong></th><th><strong>1</strong></th><th><strong>2</strong></th><th><strong>3</strong></th><th><strong>4</strong></th><th><strong>5</strong></th><th><strong>6</strong></th></tr></thead><tbody><tr><td><strong>Dist[]</strong></td><td><strong>0</strong></td><td><strong>4</strong></td><td><strong>5</strong></td><td><strong>6</strong></td><td><strong>11</strong></td><td><strong>9</strong></td><td><strong>∞</strong></td></tr><tr><td><strong>Path[]</strong></td><td><strong>-1</strong></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>0</strong></td><td><strong>1</strong></td><td><strong>2</strong></td><td><strong>-1</strong></td></tr><tr><td><strong>Set[]</strong></td><td><strong>1</strong></td><td><strong>1</strong></td><td><strong>1</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>0</strong></td><td><strong>0</strong></td></tr></tbody></table><p><strong>按照上述遍历整个图。</strong></p><p><strong>示例代码：dijkstra1.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;dijkstra算法（最短路径：带权重的路径）</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">int n&#x3D;7;&#x2F;&#x2F;图的顶点个数 </span><br><span class="line"></span><br><span class="line">&#x2F;*</span><br><span class="line">有向图矩阵 </span><br><span class="line">结点其他六个点的路径长</span><br><span class="line"> *&#x2F;</span><br><span class="line">const float MGraph[7][7]&#x3D;&#123;</span><br><span class="line">&#123;0,4.0,6.0,6.0,INF,INF,INF&#125;,</span><br><span class="line">&#123;INF,0,1.0,INF,7.0,INF,INF&#125;,</span><br><span class="line">&#123;INF,INF,0,INF,6.0,4.0,INF&#125;,</span><br><span class="line">&#123;INF,INF,2.0,0,INF,5.0,INF&#125;,</span><br><span class="line">&#123;INF,INF,INF,INF,0,INF,6.0&#125;,</span><br><span class="line">&#123;INF,INF,INF,INF,1.0,0,8.0&#125;,</span><br><span class="line">&#123;INF,INF,INF,INF,INF,INF,0&#125;</span><br><span class="line">&#125;;</span><br><span class="line">float dist[7];&#x2F;&#x2F;保存最短路径的长度 </span><br><span class="line">int path[7];&#x2F;&#x2F;保存最短路径 </span><br><span class="line">&#x2F;&#x2F;v0：起始点 </span><br><span class="line">void dijkstra(int v0)&#123;</span><br><span class="line">int set[7];&#x2F;&#x2F;标记顶点是否被遍历过，0:代表未遍历，1：代表已遍历</span><br><span class="line">int min,v;&#x2F;&#x2F;v:点到下一层遍历的路径最短的点 min:到最短点的路径长 </span><br><span class="line">&#x2F;&#x2F;初始化dist[],path[],set[] </span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">&#x2F;&#x2F;将起始点到各个点的起始状态赋值给dist[] </span><br><span class="line">dist[i]&#x3D;MGraph[v0][i];</span><br><span class="line">&#x2F;&#x2F;set[]一开始都设置为0 </span><br><span class="line">set[i]&#x3D;0;</span><br><span class="line">&#x2F;&#x2F;如果起始点到某个点的起始距离不为无穷大，则说明 这个点为起始点的下一层点 </span><br><span class="line">if(MGraph[v0][i]&lt;INF)</span><br><span class="line">&#x2F;&#x2F;即此时v0下一层所有点的上层点都是v0 </span><br><span class="line">path[i]&#x3D;v0;</span><br><span class="line">else</span><br><span class="line">&#x2F;&#x2F;path[i]&#x3D;-1说明该点暂时还没有上一层的点 </span><br><span class="line">path[i]&#x3D;-1; </span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;初始化v0初始状态 </span><br><span class="line">set[v0]&#x3D;1;path[v0]&#x3D;-1;</span><br><span class="line">&#x2F;&#x2F;依次遍历下一层的点,v0起始点已经遍历过了，不需要再次遍历 </span><br><span class="line">for(int i&#x3D;0;i&lt;n-1;i++)&#123;</span><br><span class="line">min&#x3D;INF;&#x2F;&#x2F;初始化最短路径长度</span><br><span class="line">&#x2F;&#x2F;遍历vi点的下一层到达的点</span><br><span class="line">for(int j&#x3D;0;j&lt;n;j++)&#123;</span><br><span class="line">&#x2F;&#x2F;如果dist[j]不是无穷大，说明该点是vi的下一层点</span><br><span class="line">&#x2F;&#x2F;如果set[j]&#x3D;&#x3D;0说明该点没有遍历过，</span><br><span class="line">&#x2F;&#x2F;满足这个两个条件，说明该点需要遍历 </span><br><span class="line">&#x2F;&#x2F;遍历满足这个两个条件的所有点，并挑选出路径最短的点 </span><br><span class="line">if(set[j]&#x3D;&#x3D;0&amp;&amp;dist[j]&lt;min)&#123;</span><br><span class="line">v&#x3D;j;min&#x3D;dist[j];</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;得出遍历的点到下一层最短的点是v,距离是dist[v]</span><br><span class="line">set[v]&#x3D;1; </span><br><span class="line">&#x2F;&#x2F;比较距离 </span><br><span class="line">for(int j&#x3D;0;j&lt;n;j++)&#123;</span><br><span class="line">&#x2F;&#x2F;dist[j]表示v0点到vj点当前最短距离</span><br><span class="line">&#x2F;&#x2F;dist[v]+MGraph[v][j]表示上一个并入的顶点距离（v0到上一个顶点距离）到下一层顶点的距离 </span><br><span class="line">if(set[j]&#x3D;&#x3D;0&amp;&amp;dist[v]+MGraph[v][j]&lt;dist[j])&#123;</span><br><span class="line">dist[j]&#x3D;dist[v]+MGraph[v][j];</span><br><span class="line">path[j]&#x3D;v; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int n,m;</span><br><span class="line">printf(&quot;请输入起始点：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入终点：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;m); </span><br><span class="line">dijkstra(n);</span><br><span class="line">printf(&quot;从v%d到v%d的最短距离为：%.2f&quot;,n,m,dist[m]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-动态规划</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</url>
      
        <content type="html"><![CDATA[<h4><span id="动态规划">动态规划</span></h4><p><strong>概念：求解决策过程中最优化的数学方法。把多个阶段过程转换为一系列单阶段问题，利用各个阶段间的关系，逐个求解。</strong></p><span id="more"></span><p><strong>个人理解：递归的逆推过程</strong></p><p><strong>示例：有一堆数，a[1,2,4,1,7,8,3]，选择不相邻的几个数，相加出最大的数。定义最优解为d[i],即到i之前的最佳方案。每个数都有两种选择-选和不选。则d[i]=d<a href="%E4%B8%8D%E9%80%89%E8%BF%99%E4%B8%AA%E6%95%B0">i-1</a>|d[i]=d[i-2]+a<a href="%E9%80%89%E6%8B%A9%E8%BF%99%E4%B8%AA%E6%95%B0">i</a>。选择i最佳方案的值就是i-2之前最佳的方案的值加第i个数值。不选i,最佳方案的值就是i-1之间最佳方案的值。</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.1.png" alt="6.1"></p><p><strong>示例代码：dp.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;dynamic program 动态规划</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int max(int n,int m)&#123;</span><br><span class="line">if(m &gt; n) return m;</span><br><span class="line">else return n;</span><br><span class="line">&#125;</span><br><span class="line">int dp(int a[],int len)&#123;</span><br><span class="line">int A,B;&#x2F;&#x2F;A :选择当前数后的结果，B:不选择当前数后的结果 </span><br><span class="line">int b[len]&#x3D;&#123;0&#125;;&#x2F;&#x2F;b[len]表示选择的数，数值加在一起的值 </span><br><span class="line">b[0]&#x3D;a[0];&#x2F;&#x2F;初始化当数只有一个时，最终结果就是b[0] </span><br><span class="line">b[1] &#x3D; max(a[0],a[1]);&#x2F;&#x2F;当前数值就是 </span><br><span class="line">for(int i&#x3D;2;i&lt;len;i++)&#123;</span><br><span class="line"> A &#x3D; b[i-2] + a[i];&#x2F;&#x2F;选择 a[i] </span><br><span class="line"> B &#x3D; b[i-1];&#x2F;&#x2F;不选择 a[i]</span><br><span class="line"> b[i]&#x3D;max(A,B);&#x2F;&#x2F;比较选择和不选择a[i]后那个结果更大些 </span><br><span class="line"> &#125;</span><br><span class="line">return b[len-1];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line">&#x2F;&#x2F; 由这些数中挑选相加成最大的数，相邻两个数不可同时选择 </span><br><span class="line">int a[7]&#x3D;&#123;1,2,4,1,7,8,3&#125;;</span><br><span class="line">&#x2F;&#x2F;数组长度 </span><br><span class="line">int len &#x3D; sizeof(a) &#x2F; sizeof(a[0]);</span><br><span class="line">printf(&quot;%d\n&quot;, dp(a,len));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure><p><strong>示例：区间问题，有1-8份工作，占用时间不同，价值不同，要求在时间不冲突的情况下，选择工作，挣最多的钱。</strong></p><p><strong>分析过程：</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.1.png" alt="6.1"></p><p><strong>示例代码：dp1.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;dynamic program 动态规划</span><br><span class="line">&#x2F;&#x2F;选择不冲突的任务，使得到的钱最多</span><br><span class="line">&#x2F;*测试数据</span><br><span class="line">8</span><br><span class="line">5 1 4</span><br><span class="line">1 3 5</span><br><span class="line">8 0 6</span><br><span class="line">4 4 7</span><br><span class="line">6 3 8</span><br><span class="line">3 5 9</span><br><span class="line">2 6 10</span><br><span class="line">4 8 11</span><br><span class="line">*&#x2F;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int value[8]; &#x2F;&#x2F;价值</span><br><span class="line">int end_time[8];&#x2F;&#x2F;任务开始时间</span><br><span class="line">int start_time[8];&#x2F;&#x2F;任务结束时间</span><br><span class="line">int prev[8];&#x2F;&#x2F;如果确定做这一任务，那么下一个可以做的任务是？下一个任务的下标 </span><br><span class="line">int n&#x3D;8;&#x2F;&#x2F;任务数量</span><br><span class="line">int m&#x3D;0;</span><br><span class="line">int max(int n,int m) &#123;</span><br><span class="line">if(n&gt;m)return n;</span><br><span class="line">else return m;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">int OPT(int i);</span><br><span class="line">for(int i&#x3D;0; i&lt;n; i++) &#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;value[i]);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;start_time[i]);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;end_time[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;初始化数据</span><br><span class="line">for(int i&#x3D;0; i&lt;8; i++) &#123;</span><br><span class="line">prev[i]&#x3D;-1;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;1; i&lt;8; i++) &#123;</span><br><span class="line">for(int j&#x3D;0; j&lt;i; j++) &#123;</span><br><span class="line">if(start_time[i]&gt;&#x3D;end_time[j])</span><br><span class="line">prev[i]&#x3D;max(prev[i],j);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">for(int i&#x3D;0; i&lt;8; i++) &#123;</span><br><span class="line">printf(&quot;%d &quot;,prev[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n%d &quot;,OPT(8));</span><br><span class="line">&#125;</span><br><span class="line">int OPT(int i) &#123;</span><br><span class="line">if(i &#x3D;&#x3D; -1) return 0;</span><br><span class="line">return max(OPT(i-1), value[i]+OPT(prev[i]));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>示例：背包容量为s,有一堆物品大小不同，随意挑选物品，判断背包是否能正好背装满。</strong></p><p><strong>分析过程：</strong></p><p><img src="/2021/04/10/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/6.2.png" alt="6.2"></p><p><strong>示例代码：dp2.cpp</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;背包容量为s,有一堆物品大小不同，随意挑选物品，判断背包是否能正好背装满。 </span><br><span class="line">&#x2F;&#x2F;递归</span><br><span class="line">bool subset(int arr[],int i,int s) &#123;</span><br><span class="line">if(s &#x3D;&#x3D; 0)  return true;</span><br><span class="line">else if(i &#x3D;&#x3D; 0) return arr[0] &#x3D;&#x3D; s;</span><br><span class="line">else if(arr[i]&gt;s) return subset(arr,i-1,s);</span><br><span class="line">else &#123;</span><br><span class="line">int A &#x3D; subset(arr,i-1,s-arr[i]);</span><br><span class="line">int B &#x3D; subset(arr,i-1,s);</span><br><span class="line">return A or B;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int sub[6][100];</span><br><span class="line">bool dp_subset(int goods[],int s,int length) &#123;</span><br><span class="line">for(int i&#x3D;0; i&lt;length; i++) &#123; &#x2F;&#x2F;初始化</span><br><span class="line">for(int j&#x3D;0; j&lt;&#x3D;s; j++) &#123;</span><br><span class="line">if(i&#x3D;&#x3D;0) sub[0][j]&#x3D;0;</span><br><span class="line">if(j&#x3D;&#x3D;0) sub[i][0]&#x3D;1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">sub[0][goods[0]]&#x3D;1;</span><br><span class="line">for(int i&#x3D;1; i&lt;length; i++) &#123; &#x2F;&#x2F;初始化</span><br><span class="line">for(int j&#x3D;1; j&lt;&#x3D;s; j++) &#123;</span><br><span class="line"></span><br><span class="line">if(goods[i]&gt;s)</span><br><span class="line">sub[i][j]&#x3D;sub[i-1][j] ;</span><br><span class="line">else &#123;</span><br><span class="line">int A &#x3D; sub[i-1][j-goods[i]];</span><br><span class="line">int B &#x3D; sub[i-1][j];</span><br><span class="line">sub[i][j] &#x3D; A or B; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return sub[length-1][s];</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int s;&#x2F;&#x2F;背包容量 </span><br><span class="line">printf(&quot;请输入背包容量：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;s); </span><br><span class="line"></span><br><span class="line">int length;&#x2F;&#x2F;物品的数量 </span><br><span class="line">printf(&quot;\n请输入物品的数量：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;length);</span><br><span class="line"></span><br><span class="line">int goods[length]; &#x2F;&#x2F;物品重量&#x3D; &#123;3 34 4 12 5 2&#125;</span><br><span class="line">printf(&quot;\n请输入每个物品的重量：&quot;);</span><br><span class="line">for(int i&#x3D;0;i&lt;length;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;goods[i]); </span><br><span class="line">&#125;</span><br><span class="line">if(dp_subset(goods,s,length))</span><br><span class="line">printf(&quot;\ntrue&quot;);</span><br><span class="line">else</span><br><span class="line">printf(&quot;\nfalse&quot;);</span><br><span class="line"></span><br><span class="line">&#x2F;*printf(&quot;%d\n&quot;,dp_subset(goods,s,length));</span><br><span class="line">for(int i&#x3D;0; i&lt;length; i++) &#123; &#x2F;&#x2F;初始化</span><br><span class="line">for(int j&#x3D;0; j&lt;&#x3D;s; j++) &#123;</span><br><span class="line">printf(&quot;%d &quot;,sub[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#125;*&#x2F;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-递归与回溯</title>
      <link href="2021/04/10/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF/"/>
      <url>2021/04/10/%E7%AE%97%E6%B3%95-%E9%80%92%E5%BD%92%E4%B8%8E%E5%9B%9E%E6%BA%AF/</url>
      
        <content type="html"><![CDATA[<h4><span id="递归">递归</span></h4><p><strong>程序调用自身。构成递归构成的条件：</strong></p><p><strong>（1）子问题与原始问题为相同的事，且更为简单</strong></p><p><strong>（2）不能无限调用本身，必须有一个出口</strong></p><span id="more"></span><p><strong>递归最经典的案例：斐波纳契数数列（黄金分割数列）。</strong></p><p><strong>缺点：执行效率低，一般情况下应尽量避免使用递归</strong></p><p><strong>示例：一个数的阶乘；两个数的最大公约数；n阶台阶几种走法；一个集合的子集</strong></p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;求一个数的阶乘</span><br><span class="line">int s&#x3D;1;</span><br><span class="line">int jc(int n)&#123;</span><br><span class="line">if(n&#x3D;&#x3D;0)</span><br><span class="line">return s;</span><br><span class="line">s*&#x3D;n;</span><br><span class="line">jc(n-1);</span><br><span class="line">&#125;</span><br><span class="line">int jc1(int n)&#123;</span><br><span class="line">if(n&#x3D;&#x3D;0) return 1;</span><br><span class="line">return n*jc1(n-1);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;求一个数的最大公约数（辗转相除）</span><br><span class="line">int gy(int a,int b)&#123;</span><br><span class="line">if(a%b&#x3D;&#x3D;0) return b;</span><br><span class="line">&#x2F;&#x2F;a%b&#x3D;c;a&#x3D;b;b&#x3D;c;</span><br><span class="line">return gy(b,a%b);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;如果共有n阶台阶，一次可以走一阶或两阶，求有多少种走法？</span><br><span class="line">int tj(int n)&#123;</span><br><span class="line">if(n&#x3D;&#x3D;1) return 1;</span><br><span class="line">if(n&#x3D;&#x3D;2) return 2;</span><br><span class="line">return tj(n-1)+tj(n-2);</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;求一个集合的子集</span><br><span class="line">int arr[3]&#x3D;&#123;0&#125;;</span><br><span class="line">void display(int a[])&#123;</span><br><span class="line">int i;</span><br><span class="line">printf(&quot;&#123;&quot;) ;</span><br><span class="line">for(i&#x3D;0;i&lt;3;i++)&#123;</span><br><span class="line">if(arr[i]&#x3D;&#x3D;0)&#123;</span><br><span class="line">printf(&quot;%d&quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;&#125;,&quot;);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">int recurtion(int a[],int n)&#123;</span><br><span class="line">if(n&#x3D;&#x3D;0)&#123;</span><br><span class="line"> display(a);</span><br><span class="line">&#125; </span><br><span class="line">else&#123;</span><br><span class="line">arr[n-1]&#x3D;0;</span><br><span class="line">    recurtion(a,n-1);</span><br><span class="line">    arr[n-1]&#x3D;1;</span><br><span class="line">recurtion(a,n-1);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int a[]&#x3D;&#123;1,2,3&#125;;</span><br><span class="line">int n&#x3D;sizeof(a)&#x2F;sizeof(a[0]);</span><br><span class="line">printf(&quot;递归\n&quot;); </span><br><span class="line">&#x2F;&#x2F;求一个集合的子集</span><br><span class="line">&#x2F;&#x2F;printf(&quot;&#123;&quot;) ;</span><br><span class="line">&#x2F;&#x2F;recurtion(a,3);printf(&quot;&#125;&quot;); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求一个数的阶乘</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%d&quot;,jc1(5)); </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;求两个数的最大公约数</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%d&quot;,gy(319,377)) ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;如果共有n阶台阶，一次可以走一阶或两阶，求有多少种走法</span><br><span class="line">printf(&quot;%d&quot;,tj(10)); </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4><span id="回溯">回溯</span></h4><p><strong>基本思想：从一条路往前走，能进则进，不能进则退回来，换一条路再试，（能进则进）。回溯算法也叫试探法，它是一种系统地搜索问题的解的方法。</strong></p><p><strong>用回溯算法解决问题的一般步骤：</strong></p><p><strong>1、针对所给问题，定义问题的解空间，它至少包含问题的一个（最优）解。</strong></p><p><strong>2、确定易于搜索的解空间结构,使得能用<a href="https://baike.baidu.com/item/%E5%9B%9E%E6%BA%AF%E6%B3%95">回溯法</a>方便地搜索整个解空间。</strong></p><p><strong>3、以深度优先的方式搜索解空间，并且在搜索过程中用剪枝函数避免无效搜索。</strong></p><p><strong>示例：八皇后问题</strong></p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;八皇后问题</span><br><span class="line">&#x2F;*</span><br><span class="line"> *在8x8的棋盘上合法放置八个皇后，即每个皇后不和其他皇后在同一列、行和对角线上</span><br><span class="line"> *方法：回溯（确定每一行只能放置一个皇后，且合法，遍历每一行位置放置皇后，直至放置八个为止）</span><br><span class="line"> *返回上一层选择不同的位置放置皇后，直至到第一次的所有位置，即穷举所有可能。 </span><br><span class="line">*&#x2F; </span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int solution&#x3D;0;&#x2F;&#x2F;方案</span><br><span class="line">int arr[8][8]; &#x2F;&#x2F;棋盘</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;检查点是否合法（即是否存在其他的皇后在该点所在的列、行、左右对角线 ）</span><br><span class="line">int check(int i, int j)&#123; &#x2F;&#x2F;i行j列 </span><br><span class="line">int k,h;</span><br><span class="line">&#x2F;&#x2F;判断列是否合法（遍历每层只放一个皇后，所有不用再重复检查一行是否有其他皇后）</span><br><span class="line">for(k &#x3D; 0; k &lt; 8 ; k ++)&#123;</span><br><span class="line">if(arr[k][j] &#x3D;&#x3D; 1)&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;判断左对角线是否合法</span><br><span class="line">for(k &#x3D; i - 1,h &#x3D; j - 1; k &gt;&#x3D; 0 &amp;&amp; h &gt;&#x3D; 0; k --, h--)&#123;</span><br><span class="line">if(arr[k][h] &#x3D;&#x3D; 1)&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;判断右对角线是否合法</span><br><span class="line">for(k &#x3D; i - 1,h &#x3D; j + 1; k &gt;&#x3D; 0 &amp;&amp; h &lt; 8; k --, h ++)&#123;</span><br><span class="line">if(arr[k][h] &#x3D;&#x3D; 1)&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">return 1;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;放置皇后,i指棋盘层数 </span><br><span class="line">void queen(int i) &#123;</span><br><span class="line">int j;</span><br><span class="line">if(i &gt; 7)&#123;</span><br><span class="line">solution ++; </span><br><span class="line">return ;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;遍历棋盘的每一点 深度回溯</span><br><span class="line">for(j &#x3D; 0; j &lt; 8; j ++) &#123;</span><br><span class="line">if(check(i,j))&#123;</span><br><span class="line">arr[i][j] &#x3D; 1;&#x2F;&#x2F;放置皇后</span><br><span class="line">queen(i + 1);&#x2F;&#x2F;遍历下一层 </span><br><span class="line">arr[i][j] &#x3D; 0;&#x2F;&#x2F;将此点重置为零，避免回溯出现脏数据</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">queen(0);</span><br><span class="line">printf(&quot;%d\n&quot;,solution);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-广搜</title>
      <link href="2021/04/09/%E7%AE%97%E6%B3%95-%E5%B9%BF%E6%90%9C/"/>
      <url>2021/04/09/%E7%AE%97%E6%B3%95-%E5%B9%BF%E6%90%9C/</url>
      
        <content type="html"><![CDATA[<h4><span id="广度优先搜索bfs">广度优先搜索(BFS)</span></h4><p><strong>基本思想：广度优先搜索是最简便的图的搜索算法之一，层层遍历，不考虑结果可能出现的位置，彻底遍历完整张图，直至找到结果。</strong></p><span id="more"></span>![3.1](/6.png)<p><strong>演示：若A为开始的点，就将A先压入队列，遍历与A相邻的点，A出队，BCD入队，遍历B点的相邻的点，B出队，E入队。此时队列为CDE，遍历与C相邻的点，C出队，F入队。此时队列为DEF，遍历与D相邻的点，D出队，G入队。此时队列为EFG,遍历与E相邻的点，E没有相邻的点，E出队。此时队列为FG，遍历与F相邻的点，F出队，H入队。此时队列为GH，遍历与G相邻的点，由于H和D都已经被遍历过，所有不存在与G相邻且没有遍历过的点，G出队。此时队列为H，遍历与H相邻的点，不存在与H相邻且没有遍历过的点，H出队。所以图6用广度优先搜索的顺序是ABCDEFGH。</strong></p><p><strong>示例：迷宫最短路径问题</strong></p><p><strong>分析：从开始点遍历点的上下左右并过滤非通路的点，且对已遍历的点标记和记录通路点到起点的位置，选择一个通路的点遍历该点的上下左右，如此循环直至找到迷宫终点。广度优先一层层扩散，第一次寻找到终点即最短的路径。</strong></p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line"> *宽度有限搜索</span><br><span class="line"> *迷宫最短路径问题，起始点为S，结束点为G 二维图形有</span><br><span class="line">  m&#x3D;10 n&#x3D;10；</span><br><span class="line">#S######.#</span><br><span class="line">......#..#</span><br><span class="line">.#.##.##.#</span><br><span class="line">.#........</span><br><span class="line">##.##.####</span><br><span class="line">....#....#</span><br><span class="line">.#######.#</span><br><span class="line">....#.....</span><br><span class="line">.####.###.</span><br><span class="line">....#...G#</span><br><span class="line"> *&#x2F;</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;cstring&gt;</span><br><span class="line">#include&lt;queue&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define INF 0x3f3f3f3f</span><br><span class="line">&#x2F;&#x2F;定义结构体</span><br><span class="line">typedef pair&lt;int,int &gt; P;</span><br><span class="line">const int MAX &#x3D;100;</span><br><span class="line">&#x2F;&#x2F;迷宫的二维图像数组</span><br><span class="line">char maze[MAX][MAX+1];</span><br><span class="line">int m,n;&#x2F;&#x2F;几行几列</span><br><span class="line">int sx,sy;&#x2F;&#x2F;起点坐标</span><br><span class="line">int gx,gy;&#x2F;&#x2F;终点坐标</span><br><span class="line">&#x2F;&#x2F;上下左右</span><br><span class="line">int dx[4]&#x3D; &#123;1,0,-1,0&#125;;</span><br><span class="line">int dy[4]&#x3D; &#123;0,1,0,-1&#125;;</span><br><span class="line">&#x2F;&#x2F;记录当前遍历点的坐标，及该点到起始点的距离 </span><br><span class="line">int d[MAX][MAX+1];</span><br><span class="line">&#x2F;&#x2F;广度优先搜索 </span><br><span class="line">int bfs() &#123;</span><br><span class="line">int i,j;</span><br><span class="line">&#x2F;&#x2F;定义队列que</span><br><span class="line">queue&lt;P&gt; que;</span><br><span class="line">&#x2F;&#x2F;寻找起始坐标</span><br><span class="line">for(i &#x3D; 0; i &lt; m; i ++) &#123;</span><br><span class="line">for(j &#x3D; 0; j &lt; n; j++) &#123;</span><br><span class="line">if(maze[i][j ]&#x3D;&#x3D; &#39;S&#39;) &#123;</span><br><span class="line">sx &#x3D; i;</span><br><span class="line">sy&#x3D;j;&#x2F;&#x2F;赋值下标</span><br><span class="line">&#125;</span><br><span class="line">if(maze[i][j] &#x3D;&#x3D; &#39;G&#39;) &#123;</span><br><span class="line">gx &#x3D; i;</span><br><span class="line">gy &#x3D; j;&#x2F;&#x2F;赋值下标</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;*</span><br><span class="line"> *将数组d初始化为无穷大</span><br><span class="line"> *作用1：d数组记录这个点到开始点的最小步数</span><br><span class="line"> *作用2：d数组标记这个点是否被遍历过，如果为值为无穷大就代表这个点没有被遍历过</span><br><span class="line"> *&#x2F;</span><br><span class="line">memset(d,INF,sizeof(d));</span><br><span class="line">&#x2F;&#x2F;将初始转态压入队列</span><br><span class="line">que.push(P(sx,sy));</span><br><span class="line">&#x2F;&#x2F;初始化距离为0； </span><br><span class="line">d[sx][sy] &#x3D; 0;</span><br><span class="line"></span><br><span class="line">while(que.size()) &#123;</span><br><span class="line">int i; </span><br><span class="line">&#x2F;&#x2F;取出队头</span><br><span class="line">P p &#x3D; que.front();</span><br><span class="line">que.pop();</span><br><span class="line">&#x2F;&#x2F;移动位置nx,ny</span><br><span class="line">int nx &#x3D; p.first;</span><br><span class="line">int ny &#x3D; p.second;</span><br><span class="line">if(nx &#x3D;&#x3D; gx &amp;&amp; ny &#x3D;&#x3D; gy) break;</span><br><span class="line">&#x2F;&#x2F;遍历点的上下左右</span><br><span class="line">for(i &#x3D; 0; i &lt; 4; i ++) &#123;</span><br><span class="line">&#x2F;&#x2F;移动后的位置记为（nx,ny）</span><br><span class="line">nx &#x3D; p.first + dx[i];</span><br><span class="line">ny &#x3D; p.second + dy[i];</span><br><span class="line">&#x2F;&#x2F;限制边界，查看点是否遍历过，查看点是否是通路的点 </span><br><span class="line">if(nx &gt;&#x3D; 0 &amp;&amp; ny &gt;&#x3D; 0 &amp;&amp; nx &lt; m &amp;&amp; ny &lt; n &amp;&amp; d[nx][ny] &#x3D;&#x3D; INF &amp;&amp; maze[nx][ny] !&#x3D; &#39;#&#39;) &#123;</span><br><span class="line">&#x2F;&#x2F;如果该点合法 d数组值加一 </span><br><span class="line">d[nx][ny] &#x3D; d[p.first][p.second] + 1;</span><br><span class="line">&#x2F;&#x2F;把该点压入队列 </span><br><span class="line">que.push(P(nx,ny));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">return d[gx][gy];</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">int i;</span><br><span class="line">cin&gt;&gt;m&gt;&gt;n;</span><br><span class="line">for(i&#x3D;0; i&lt;m; i++)</span><br><span class="line">cin&gt;&gt;maze[i];</span><br><span class="line">cout&lt;&lt;bfs()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-深搜</title>
      <link href="2021/04/09/%E7%AE%97%E6%B3%95-%E6%B7%B1%E6%90%9C/"/>
      <url>2021/04/09/%E7%AE%97%E6%B3%95-%E6%B7%B1%E6%90%9C/</url>
      
        <content type="html"><![CDATA[<h4><span id="深度优先搜索dfs">深度优先搜索（DFS）</span></h4><p>概念思想：DFS属于图算法的一种，从一个顶点开始向下搜索没有遍历过的结点，直至不能再深入为止，且每个结点只能遍历一次。</p><span id="more"></span><p>例子解释：如图从A结点开始深搜，遍历的过程为：A-&gt;D-&gt;G-&gt;H-&gt;C-&gt;F-&gt;B-E</p><p><img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E6%B7%B1%E6%90%9C/3.png" alt="3.1"></p><p><strong>对二维网络进行深度优先搜索，遇到1则向其八个方向搜索，其他八个方向也有1则以这个点为原点向它的八个方向搜索，已经遍历过的点，不再遍历。直至遍历的都为0，则在返回上一个点，换个方向继续搜索，如例子解释的遍历方式一样。如例题遍历到的第一个1数组下标为[1,4]，从这个点的上方开始围绕着这个点其它八个方向的点遍历，遍历到右边是遇到第二个为1的点数组下标[1,5],继续上述操作。即遍历一次经[1,4]-&gt;[1,5]-&gt;[2,6]-&gt;[2,5]-&gt;[2,4]-&gt;[2,3]。</strong></p><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;多少岛屿及最大岛屿问题 </span><br><span class="line">&#x2F;*</span><br><span class="line">8 16</span><br><span class="line">0000000000000000</span><br><span class="line">0000110011000000</span><br><span class="line">0001111000111000</span><br><span class="line">0000000000000000</span><br><span class="line">0011111100000110</span><br><span class="line">0011100000000000</span><br><span class="line">0100001111111100</span><br><span class="line">0000000000000000</span><br><span class="line">*&#x2F;   </span><br><span class="line">int a[500][500];</span><br><span class="line">int n, m, c, max;&#x2F;&#x2F;c:面积 </span><br><span class="line">void dfs(int x, int y)&#123;</span><br><span class="line">if(a[x][y]&#x3D;&#x3D;0)</span><br><span class="line">return;</span><br><span class="line">c ++;</span><br><span class="line">a[x][y] &#x3D; 0;</span><br><span class="line">dfs(x,y+1);</span><br><span class="line">dfs(x,y-1);</span><br><span class="line">dfs(x-1,y);</span><br><span class="line">dfs(x+1,y);</span><br><span class="line">dfs(x+1,y+1);</span><br><span class="line">dfs(x+1,y-1);</span><br><span class="line">dfs(x-1,y+1);</span><br><span class="line">dfs(x-1,y-1);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">int k, i, j, sum;</span><br><span class="line">printf(&quot;求二维网络岛屿数及最大岛屿面积，0代表海域，1代表岛屿\n&quot;); </span><br><span class="line">printf(&quot;请输入行列值：&quot;); </span><br><span class="line">scanf(&quot;%d%d&quot;,&amp;n, &amp;m);</span><br><span class="line">printf(&quot;请输入由0和1组成的%d行%d列的二维网络\n&quot;,n,m);</span><br><span class="line">for (i &#x3D; 0; i &lt; n; i ++)&#123;</span><br><span class="line">for(j &#x3D; 0; j &lt; m; j ++)&#123;</span><br><span class="line">scanf(&quot;%1d&quot;,&amp;a[i][j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line">for (i &#x3D; 0; i &lt; n; i  ++)&#123;</span><br><span class="line">for(j &#x3D; 0; j &lt; m; j ++)&#123;</span><br><span class="line">if(a[i][j] &#x3D;&#x3D; 1) &#123;</span><br><span class="line">sum ++;</span><br><span class="line">c &#x3D; 0;</span><br><span class="line">dfs(i,j);</span><br><span class="line">if(c &gt; max)</span><br><span class="line">max &#x3D; c ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;岛屿总数量为：%d，最大岛屿面积为：%d\n&quot;,sum,max);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-归并排序</title>
      <link href="2021/04/09/%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/"/>
      <url>2021/04/09/%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4><span id="归并排序">归并排序</span></h4><p>分治思想、二路归并。</p><ol><li><p>将数列从中间分开，对两边排序。</p></li><li><p>将两个有序数组进行合并。</p><span id="more"></span></li></ol><p>例子：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>10</td><td>4</td><td>6</td><td>3</td><td>8</td><td>2</td><td>5</td><td>7</td></tr></tbody></table><p><img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/2.1.png" alt="2.1"></p><center>过程图2.1</center><p><img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F/2.2.png" alt="2.1"></p><center>过程图2.2</center><p>第一趟归并后</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>4</td><td>10</td><td>3</td><td>6</td><td>2</td><td>8</td><td>5</td><td>7</td></tr></tbody></table><p>第二趟归并后</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>3</td><td>4</td><td>6</td><td>10</td><td>2</td><td>5</td><td>7</td><td>8</td></tr></tbody></table><p>第三趟归并后</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th></tr></thead><tbody><tr><td>2</td><td>3</td><td>4</td><td>5</td><td>6</td><td>7</td><td>8</td><td>10</td></tr></tbody></table><p>具体过程如2.2 ：数组先往左分，直至不可再分即“[0]”，再返回上一个结点即“[0,1]”，再将“[0,1]”往右分，直至不可再分即“[1]”,“[0,1]”结点左右分完以后或者说往右分的“[1]”结点不可再分就对“[0,1]”的左右结点进行二路归并，即将“[0]”“[1]”排序合并。</p><p>“[0,1]”结点左右分完，再返回上上个结点即“[0,3]”，对“[0,3]”结点往左分，往左分完，在往右分，分完在合并，重复上述操作，直至所有结点分完且合并。最终归为一个父节点即“[0,7]”，输出结果。</p><p>总结对一个结点左右皆不可再分或已经分过进行归并，优先级先分左边再分右边，分完左右排序合并。</p><p>细节：mergeSort(a,s,e); “a”指数列数组，”s”指数组首地址，”e”指数组尾地址。</p><p>代码实现：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">void merge(int a[],int l,int m,int r)&#123;</span><br><span class="line">int LEFT_SIZE&#x3D;m-l;&#x2F;&#x2F;left[]的长度 </span><br><span class="line">int RIGHT_SIZE&#x3D;r-m+1;&#x2F;&#x2F;right[]的长度 </span><br><span class="line">&#x2F;&#x2F;a[5]&#x3D;&#123;1,2,5,3,1&#125;</span><br><span class="line">int left[LEFT_SIZE];</span><br><span class="line">int right[LEFT_SIZE];</span><br><span class="line">int i,k,j;</span><br><span class="line">&#x2F;&#x2F;将数组分成左右两个数组 </span><br><span class="line">for(i&#x3D;l;i&lt;&#x3D;m-1;i++)&#123;</span><br><span class="line">left[i-l]&#x3D;a[i];</span><br><span class="line">&#125;</span><br><span class="line">for(i&#x3D;m;i&lt;&#x3D;r;i++)&#123;</span><br><span class="line">right[i-m]&#x3D;a[i];</span><br><span class="line">&#125;</span><br><span class="line">i&#x3D;0;&#x2F;&#x2F;&#39;i&#39;,指left[]的首地址 </span><br><span class="line">j&#x3D;0;&#x2F;&#x2F;&#39;j&#39;,指right[]的首地址 </span><br><span class="line">k&#x3D;l;&#x2F;&#x2F;&#39;k&#39;,指a[]的首地址</span><br><span class="line">&#x2F;</span><br><span class="line"> 把left[]和right[]重新有序地放到a[]中 </span><br><span class="line"> &#x2F; </span><br><span class="line"></span><br><span class="line"> &#x2F;&#x2F;如果right[]和left[]数组中都存在着数据，那么比较 </span><br><span class="line">while(i&lt;LEFT_SIZE&amp;&amp;j&lt;RIGHT_SIZE)&#123;</span><br><span class="line">if(left[i]&lt;right[j])&#123;</span><br><span class="line">a[k]&#x3D;left[i];</span><br><span class="line">i++;k++;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">a[k]&#x3D;right[j];</span><br><span class="line">j++;k++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;如果比较完以后，left[]数组中仍存在数据，就依次放入a[]数组中 </span><br><span class="line">while(i&lt;LEFT_SIZE)&#123;</span><br><span class="line">a[k]&#x3D;left[i];i++;k++;&#125;</span><br><span class="line">&#x2F;&#x2F;如果比较完以后，right[]数组中仍存在数据，就依次放入a[]数组中 </span><br><span class="line">while(j&lt;RIGHT_SIZE)&#123;</span><br><span class="line">a[k]&#x3D;right[j];</span><br><span class="line">j++;k++;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;for(int t&#x3D;0;t&lt;LEFT_SIZE;t++)</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%d &quot;,left[t]);</span><br><span class="line">&#x2F;&#x2F;printf(&quot; sdfadf &quot;,a[r]);</span><br><span class="line">&#x2F;&#x2F;for(int t&#x3D;0;t&lt;RIGHT_SIZE;t++)</span><br><span class="line">&#x2F;&#x2F;printf(&quot;%d &quot;,right[t]);</span><br><span class="line">&#x2F;&#x2F;printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void mergesort(int a[],int l,int r)&#123;</span><br><span class="line">if(l&lt;r)&#123;</span><br><span class="line">int m&#x3D;(r+l)&#x2F;2;</span><br><span class="line"></span><br><span class="line">mergesort(a,l,m);</span><br><span class="line">mergesort(a,m+1,r);</span><br><span class="line">&#x2F;</span><br><span class="line">for(int t&#x3D;l;t&lt;&#x3D;m;t++)</span><br><span class="line">printf(&quot;%d &quot;,a[t]);</span><br><span class="line">printf(&quot; sdfadf &quot;);</span><br><span class="line">for(int t&#x3D;m+1;t&lt;&#x3D;r;t++)</span><br><span class="line">printf(&quot;%d &quot;,a[t]);</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">&#x2F;</span><br><span class="line">merge(a,l,m+1,r);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">int n,i;</span><br><span class="line">int a[100];</span><br><span class="line">printf(&quot;合并排序\n请输入数组长度：\n&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入%d个整型数据：\n&quot;,n);</span><br><span class="line">for(i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">int l&#x3D;0;&#x2F;&#x2F;l首地址 </span><br><span class="line">int r&#x3D;n-1;&#x2F;&#x2F;r尾地址 </span><br><span class="line">mergesort(a,l,r);</span><br><span class="line">printf(&quot;排序结果：\n&quot;);</span><br><span class="line">for(i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">printf(&quot;%d &quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-堆排序</title>
      <link href="2021/04/09/%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/"/>
      <url>2021/04/09/%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4><span id="堆排序">堆排序</span></h4><p><strong>思想：将无序的数列构造成大顶堆，此时堆的根节点就是整个数列中最大的值，将此时的根节点与堆中最后一个元素交换，将根节点拿出来。再对此时的数列进行重新构造大顶堆。依次操作，直至构造的堆只有一个元素，即数列的最小的数。</strong><span id="more"></span></p><p><strong>例子：如有数组tree{2,5,3,1,10,4}</strong></p><p><strong>先对数列构造大顶堆，对数列构造完全二叉树，从树的倒数第二层对树的节点进行heapify操作（即对于有子节点的结点，将结点的值与其子节点的值比较，如果该结点的值比子节点小，结点的值就与子节点的值交换，如图3.1所示），直至完全二叉树的根节点结束。这样就成功构造出大顶堆。</strong></p><p><strong>前四趟堆排序，先构造大顶堆，在交换值，取值拿出如图 3.2所示：</strong> </p><p>  <img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/3.2.1.jpg" alt="3.2"><img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/3.2.2.png" alt="3.2"><img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/3.2.3.png" alt="3.2"><img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/3.2.4.png" alt="3.2"></p><center>图3.2：堆排序前四趟过程图</center><p><img src="/2021/04/09/%E7%AE%97%E6%B3%95-%E5%A0%86%E6%8E%92%E5%BA%8F/3.1.png" alt="3.1"></p><center>图3.1：heapify操作过程图</center><p><strong>示例代码：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;先进行heapify，使父节点最大，如，根节点 5 左右节点 6 9 那么就将子节点9与父节点5交换形成堆</span><br><span class="line">&#x2F;&#x2F;对于一个完全二叉树，从倒数第二层进行heapify,直到根节点，让完全二叉树形成堆</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">&#x2F;&#x2F;交换函数</span><br><span class="line">void swap(int tree[],int i,int j)&#123;</span><br><span class="line">int temp&#x3D;tree[i];</span><br><span class="line">tree[i]&#x3D;tree[j];</span><br><span class="line">tree[j]&#x3D;temp;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;*</span><br><span class="line"> *tree[]:数组或者说一棵树</span><br><span class="line"> *n:树里面有多少个结点</span><br><span class="line"> *i:树里第几个结点 </span><br><span class="line"> *c1&lt;n和c2&lt;n 判断是否出界 </span><br><span class="line"> *&#x2F;</span><br><span class="line">void heapify(int tree[],int n,int i)&#123;</span><br><span class="line"></span><br><span class="line">if(n&lt;&#x3D;i) return ;</span><br><span class="line">int c1&#x3D;(2*i)+1;&#x2F;&#x2F;第i个结点的左子节点 </span><br><span class="line">int c2&#x3D;(2*i)+2; &#x2F;&#x2F;第i个结点的右子节点</span><br><span class="line">&#x2F;&#x2F;从三个结点中找出最大值</span><br><span class="line">int max&#x3D;i;</span><br><span class="line">if(c1&lt;n &amp;&amp; tree[max]&lt;tree[c1])&#123;</span><br><span class="line">max&#x3D;c1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">if(c2&lt;n &amp;&amp; tree[max]&lt;tree[c2])&#123;</span><br><span class="line">max&#x3D;c2;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;如果最大值的结点不是第i个结点，就交换值 </span><br><span class="line">if(max !&#x3D; i)&#123;</span><br><span class="line">&#x2F;&#x2F;交换两个结点</span><br><span class="line">swap(tree,max,i); </span><br><span class="line">&#x2F;&#x2F;对下面节点继续做heapify </span><br><span class="line">heapify(tree,n,max);</span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;构建堆</span><br><span class="line">void build_heap(int tree[],int n)&#123;</span><br><span class="line">int last_node&#x3D;n-1;</span><br><span class="line">int parent &#x3D; (last_node-1)&#x2F;2;</span><br><span class="line">int i;</span><br><span class="line">for (i&#x3D;parent;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">heapify(tree,n,i);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;堆排序，树经过heapify操作后，保证了根节点是堆中最大的数</span><br><span class="line">&#x2F;&#x2F;将根节点与最后与一个结点交换，拿出根节点</span><br><span class="line">&#x2F;&#x2F;交换最后一个结点，拿出根节点后，再对当前数进行heapify操作</span><br><span class="line">&#x2F;&#x2F;按此步骤继续，直至取到只剩一个结点</span><br><span class="line">void heap_sort(int tree[],int n)&#123;</span><br><span class="line">&#x2F;&#x2F;建堆</span><br><span class="line">build_heap(tree,n);</span><br><span class="line">int i;</span><br><span class="line">for(i&#x3D;n-1;i&gt;&#x3D;0;i--)&#123;</span><br><span class="line">&#x2F;&#x2F;每次交换根节点和最后一个结点</span><br><span class="line"></span><br><span class="line">swap(tree,i,0);</span><br><span class="line">heapify(tree,i,0); &#x2F;&#x2F;printf(&quot;%d &quot;,tree[i]);</span><br><span class="line">&#125; </span><br><span class="line">&#125; </span><br><span class="line">int main()&#123;</span><br><span class="line">int tree[100];</span><br><span class="line">int n;</span><br><span class="line">int i;</span><br><span class="line">printf(&quot;堆排序\n请输入数组长度：&quot;);</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入%d个整型数据：\n&quot;,n);</span><br><span class="line">for(i &#x3D; 0;i &lt; n; i ++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;tree[i]);</span><br><span class="line">&#125;</span><br><span class="line">heap_sort(tree,n);</span><br><span class="line">printf(&quot;堆排序结果：\n&quot;);</span><br><span class="line">for(i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">printf(&quot;%d &quot;,tree[i]);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法-快速排序</title>
      <link href="2021/04/09/%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
      <url>2021/04/09/%E7%AE%97%E6%B3%95-%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h4><span id="快速排序">快速排序</span></h4><p>分治思想，也可以理解为二分。</p><p>1．先从数列中取出一个数作为基准数。 </p><p>2．分区过程，将比这个数大的数全放到它的右边，小于或等于它的数全放到它的左边。</p><p>3．再对左右区间重复第二步，直到各区间只有一个数。</p><span id="more"></span><p>例子：（基准值k始终为循环数组的第一个值）定义数组为a[]，最小下标为s，最大下标为e，快速排序quicksort(int a[],int s,int e);</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>72</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>48</td><td>85</td></tr></tbody></table><p>初始值，i=0,j=9,k=a[i]=72</p><p>第一趟排序从j开始往前找一个比k小的数替换，即j=8,a[0]与a[8]交换值，i++，</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>72</td><td>85</td></tr></tbody></table><p>接着再找比a[8]小的值，这次从i=0开始往后找一个比a[8]（a[8]=72）大的值替换，即i=3,a[8]与a[3]交换值，j–。</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>88</td><td>60</td><td>42</td><td>83</td><td>73</td><td>72</td><td>85</td></tr></tbody></table><p>此时数组数值：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>72</td><td>60</td><td>42</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p>此时i=3,j=7,k=a[3]=72，重复上一步操作，从j开始往前找一个比a[3]小的数替换，即j=5,a[3]与a[5]交换值，i++，</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>72</td><td>60</td><td>42</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p>接着从i=3往后找比a[5]（a[5]=72）大的值替换，由于i=j=5,退出循环。第一趟排序结束，此时数组数值：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>42</td><td>60</td><td>72</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p>第一趟排序结束，最终结果：</p><table><thead><tr><th>0</th><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th></tr></thead><tbody><tr><td>48</td><td>6</td><td>57</td><td>42</td><td>60</td><td>72</td><td>83</td><td>73</td><td>88</td><td>85</td></tr></tbody></table><p>k左面的任意一个值小于k右面的任意一个值，即（left&lt;=k&lt;=right）。</p><p>第二趟分别对left或right进行上述排序（left和right可以看成两个数组进行排序）。对left，此时i=0,j=4（即上一趟循环后i或j的值减一），k=a[0];对right，此时i=5（即上一趟循环后i或j的值加一），j=9,k=[5]。即重复调用quicksort(a,s,i-1)和quicksort(a,i+1,e)或者quicksort(a,s,j-1)和quicksort(a,j+1,e)。</p><p>注：基准值的选取是不定的，虽然说无论怎么选取基准值，都不会影响最终的排序结果，但是实际应根据输入的数列特征而改变，以此保证快速排序的效率。</p><p>示例代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">int n,m,number;</span><br><span class="line">int a[100];</span><br><span class="line"></span><br><span class="line">void swap(int b,int c)&#123;</span><br><span class="line">int t;</span><br><span class="line">t&#x3D;b;</span><br><span class="line">b&#x3D;c;</span><br><span class="line">c&#x3D;t;</span><br><span class="line">&#125; </span><br><span class="line">void quicksort(int a[],int s,int e)&#123;</span><br><span class="line">if(s&gt;&#x3D;e) return;</span><br><span class="line">int i&#x3D;s;</span><br><span class="line">int j&#x3D;e;</span><br><span class="line">int k&#x3D;a[s];</span><br><span class="line">while(i&lt;j)</span><br><span class="line">&#123;</span><br><span class="line">while(i&lt;j&amp;&amp;a[j]&gt;&#x3D;k)</span><br><span class="line">j--;</span><br><span class="line">swap(&amp;a[i],&amp;a[j]);</span><br><span class="line">while(i&lt;j&amp;&amp;a[i]&lt;&#x3D;k)</span><br><span class="line">i++;</span><br><span class="line">swap(&amp;a[i],&amp;a[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">printf(&quot;%d &quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">quicksort(a,s,i-1);</span><br><span class="line">quicksort(a,i+1,e);</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">m&#x3D;0;</span><br><span class="line">number&#x3D;0;</span><br><span class="line">printf(&quot;快速排序\n请输入数组长度：\n&quot;); </span><br><span class="line">scanf(&quot;%d&quot;,&amp;n);</span><br><span class="line">printf(&quot;请输入%d个整型数据：\n&quot;,n);</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">&#125;</span><br><span class="line">quicksort(a,0,n-1);</span><br><span class="line">printf(&quot;排序结果：\n&quot;);</span><br><span class="line">for(int i&#x3D;0;i&lt;n;i++)&#123;</span><br><span class="line">printf(&quot;%d &quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git基础命令</title>
      <link href="2021/04/09/Git%E5%91%BD%E4%BB%A4/"/>
      <url>2021/04/09/Git%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍数据库SQL基础语法及相应函数。包含表的增删改查。</p></blockquote><span id="more"></span><h4><span id="git常用命令">git常用命令</span></h4><ul><li>查看远程仓库地址 - git remote -v</li><li>拉取远程代码更新本地 git pull -p</li><li>拉取远程代码更新本地 git fetch –prune origin</li></ul><h4><span id="git分支操作">git分支操作</span></h4><ul><li>git创建分支 - git branch dev</li><li> 切换到该分支 - git checkout bugFix</li><li>git创建远程分支：- git pull origin dev:dev</li></ul><h4><span id="git合并分支">git合并分支</span></h4><ul><li><p>进入要合并的分支（如开发分支合并到master，则进入master目录）</p><ul><li><p>git checkout master</p></li><li><p>git pull</p></li></ul></li><li><p>查看本地和远程仓库的所有分支 - git branch -a</p></li><li><p>查看本地仓库所有分支 - git branch</p></li><li><p>使用merge合并开发分支 - git merge 分支名</p></li><li><p>查看合并之后的状态 - git status</p></li><li><p>将本地分支与远程保持同步 - git fecth</p></li><li><p>拉取远程分支并同时创建对应的本地分支- git checkout -b 本地分支名 origin/远程分支名</p></li><li><p>将本地所有分支与远程保持同步 git fetch –all</p></li><li><p>拉取所有分支代码 git pull –all</p></li></ul><h4><span id="git查看与远程代码区别">git查看与远程代码区别</span></h4><ul><li>git status  </li><li>git diff</li></ul><h4><span id="windows下git-diff-正文中文乱码问题">windows下git -diff 正文中文乱码问题</span></h4><ul><li>set LESSCHARSET=utf-8</li></ul><h4><span id="代码合并提交标准">代码合并提交标准</span></h4><ul><li>eg：git commit -m “<a href="mailto:&#102;&#105;&#x78;&#64;&#x30;&#46;&#x31;&#x2e;&#x31;">&#102;&#105;&#x78;&#64;&#x30;&#46;&#x31;&#x2e;&#x31;</a>/21(city): 修正店铺信息与城市的硬关联”</li></ul><h4><span id="上次远程仓库">上次远程仓库</span></h4><ul><li>git add .</li><li>git comment -m “”</li><li>git push</li></ul><h4><span id="git-log-win10中文乱码">git log win10中文乱码</span></h4><ul><li>bash 环境下  export LESSCHARSET = utf-8</li><li>cmd环境下  set LESSCHARSET = utf-8</li></ul><p>git push –set-upstream origin dev-0.1-qwb -f 强制覆盖分支</p><p>git branch -D dev-0.1-qwb 删除分支</p><p>git pull origin master</p><h3><span id="一-建立本地仓库上传文件-按-github-新建成功的描述步骤输入命令">一、建立本地仓库，上传文件。按 github 新建成功的描述步骤输入命令</span></h3><ol><li><p>“ git init ”</p></li><li><p>“ git add . ”（此处有 . 需要一同输入）</p></li><li><p>“git commit -m “my commit””（”my commit”为本次提交描述）</p></li><li><p>“git remote add origin <a href="https://github.com/vincentChen02/testUpload.git%E2%80%9D%EF%BC%88https%E5%9C%B0%E5%9D%80%E4%B8%BA%E5%9C%A8github%E4%B8%8A%E6%96%B0%E5%BB%BA%E4%BB%93%E7%94%9F%E6%88%90%E7%9A%84%E8%B7%AF%E5%BE%84%EF%BC%89">https://github.com/vincentChen02/testUpload.git”（https地址为在github上新建仓生成的路径）</a></p></li><li><p>“git push -u origin master” （此处会弹出输入github 账号密码）</p></li></ol><h3><span id="二-修改github仓库名">二、修改Github仓库名</span></h3><ol><li>在github上重命名仓库</li></ol><p>​    setting-&gt;tag-&gt;rename</p><ol start="2"><li>修改本地仓库信息</li></ol><p>​    git remote -v (检查当前远程仓库信息)</p><p>​    git remote set-url origin <a href="mailto:git@github.com">git@github.com</a>:username/newrepo.git (修改本地对应的远程仓库的地址)</p><p>​    git remote -v (确认当前远程仓库信息已修改)</p><h3><span id="三-删除远程仓库文件">三、删除远程仓库文件</span></h3><ol><li>将远程代码pull到本地，保持本地仓库跟远端仓库同步</li></ol><p>​    git pull （拉取最新的仓库）</p><ol start="2"><li>删掉要删除的文件</li></ol><p>​    git rm filename (删除本地文件-filename:文件名)</p><ol start="3"><li>提交操作</li></ol><p>​    “git commit -m “my commit””（”my commit”为本次提交描述）</p><ol start="4"><li>push到远程</li></ol><p>​    “git push origin master” （此处会弹出输入github 账号密码）</p>]]></content>
      
      
      <categories>
          
          <category> 命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Excel基础知识</title>
      <link href="2021/04/09/Excel%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/04/09/Excel%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍数据库SQL基础语法及相应函数。包含表的增删改查。</p></blockquote><span id="more"></span><h2><span id="excel">Excel</span></h2><h4><span id="excel拆分sheets">Excel拆分Sheets</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Private Sub 分拆工作表()    </span><br><span class="line">Dim sht As Worksheet      </span><br><span class="line">Dim MyBook As Workbook     </span><br><span class="line">Set MyBook &#x3D; ActiveWorkbook      </span><br><span class="line">For Each sht In MyBook.Sheets        </span><br><span class="line">sht.Copy</span><br><span class="line">ActiveWorkbook.SaveAs Filename:&#x3D;MyBook.Path &amp; &quot;\&quot; &amp; sht.Name, FileFormat:&#x3D;xlOpenXMLWorkbook     &#39;将工作簿另存为xlsx格式           ActiveWorkbook.Close     </span><br><span class="line">Next      </span><br><span class="line">MsgBox &quot;文件已经被分拆完毕!&quot;  </span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><h4><span id="分离中英文">分离中英文</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;LEFT(A1,LENB(A1)-LEN(A1))</span><br></pre></td></tr></table></figure><h4><span id="英文月份变为数字">英文月份变为数字</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;MONTH(A20&amp;&quot;-1&quot;)</span><br></pre></td></tr></table></figure><h4><span id="一维表变二维表">一维表变二维表</span></h4><p>数据-自表格/区域-逆转置</p><h4><span id="数字变ym">数字变YM</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;if(A1&lt;10,2020&amp;&quot;0&quot;&amp;A1,2020&amp;A1)</span><br></pre></td></tr></table></figure><h4><span id="英文月份变ym">英文月份变YM</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x3D;IF(MONTH(J3&amp;&quot;-1&quot;)&lt;10,2019&amp;&quot;0&quot;&amp;MONTH(J3&amp;&quot;-1&quot;),2019&amp;MONTH(J3&amp;&quot;-1&quot;))</span><br></pre></td></tr></table></figure><h4><span id="同步两个sheet数据">同步两个sheet数据</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Private Sub Worksheet_Change(ByVal Target As Range)</span><br><span class="line">Application.EnableEvents &#x3D; False</span><br><span class="line">Sheet1.Range(&quot;a1:z999&quot;).Copy Sheet2.Range(&quot;a1&quot;)</span><br><span class="line">Application.EnableEvents &#x3D; True</span><br><span class="line">Sheet1.Range(&quot;a1&quot;).Select</span><br><span class="line">End Sub</span><br></pre></td></tr></table></figure><h4><span id="vlookup">vlookup</span></h4><p>注意查找的数据与查找数据域的第一列匹配</p>]]></content>
      
      
      <categories>
          
          <category> Excel </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Excel </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>QlikView基础使用</title>
      <link href="2021/04/09/QlikView/"/>
      <url>2021/04/09/QlikView/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍QlikView的基础使用。包括下载安装、配置ODBC数据源、根据数据简单拖拉报表、数据源导入、导出QVD文件等</p></blockquote><span id="more"></span><div class="row">    <embed src="./QlikView.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> BI </category>
          
      </categories>
      
      
        <tags>
            
            <tag> QlikView </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>infocus入职培训</title>
      <link href="2021/04/09/%E5%85%A5%E8%81%8C%E5%9F%B9%E8%AE%AD/"/>
      <url>2021/04/09/%E5%85%A5%E8%81%8C%E5%9F%B9%E8%AE%AD/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍QlikView的基础使用。包括下载安装、配置ODBC数据源、根据数据简单拖拉报表、数据源导入、导出QVD文件等</p></blockquote><span id="more"></span><div class="row">    <embed src="./ruzhipeixun.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常见的SQL场景</title>
      <link href="2021/04/09/%E5%B8%B8%E7%94%A8sql%E6%83%85%E6%99%AF/"/>
      <url>2021/04/09/%E5%B8%B8%E7%94%A8sql%E6%83%85%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<blockquote><p>主要介绍在写SQL过程中，经常遇到的场景。包含系统表的使用，查询表字段、注释、大小，行转列，列转行，多行数据合并一行，一行拆分多行、实现累加等多个场景。</p></blockquote><span id="more"></span><h4><span id="1将查询数据导入已有表中">1.将查询数据导入已有表中</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">insert into 表 select * from tablename</span><br></pre></td></tr></table></figure><h4><span id="2将查询数据导入新表中">2.将查询数据导入新表中</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">create table rds_rep_practice_describle_v2 as</span><br><span class="line">select distinct *  from  rds_rep_practice_describle group by concat(rep_id,item03)</span><br></pre></td></tr></table></figure><h4><span id="3去除字符串中间的空格">3.<strong>去除字符串中间的空格</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REPLACE(&#39;ababab&#39;,&#39;abab&#39;,&#39;12&#39;)&#x3D;&#39;12ab&#39;</span><br></pre></td></tr></table></figure><h4><span id="4根据逗号拆分数据分一行为多行">4.根据逗号拆分数据分一行为多行</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-- mysql 根据逗号拆分一行数据为多行,help_top表的help_topic_id 从0 开始</span><br><span class="line">SELECT</span><br><span class="line">    a.member_uuid,</span><br><span class="line">    substring_index(substring_index( a.member_role_name, &#39;,&#39;, b.id + 1 ), &#39;,&#39;,- 1 ) AS member_role_name</span><br><span class="line">FROM</span><br><span class="line">    fyk_new_upload_members_tds a</span><br><span class="line">JOIN help_top b</span><br><span class="line">ON b.id &lt; ( length( a.member_role_name ) - length( REPLACE ( a.member_role_name, &#39;,&#39;, &#39;&#39; ) ) + 1 )</span><br><span class="line"></span><br><span class="line">eg:</span><br><span class="line">BEGIN</span><br><span class="line">set @name&#x3D;&quot;abc,ad,cd&quot;;</span><br><span class="line"></span><br><span class="line">insert into test (item)</span><br><span class="line">SELECT</span><br><span class="line">SUBSTRING_INDEX(SUBSTRING_INDEX(@name,&#39;,&#39;,help_topic_id+1),&#39;,&#39;,-1) AS num</span><br><span class="line">FROM</span><br><span class="line">mysql.help_topic</span><br><span class="line">WHERE</span><br><span class="line">help_topic_id &lt; LENGTH(@name)-LENGTH(REPLACE(@name,&#39;,&#39;,&#39;&#39;))+1;</span><br><span class="line"></span><br><span class="line">END</span><br></pre></td></tr></table></figure><h4><span id="5hive-根据多个字段去重">5.<strong>Hive 根据多个字段去重</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-- hive 根据多个字段去重</span><br><span class="line">SELECT *</span><br><span class="line">FROM (</span><br><span class="line">SELECT T.*, ROW_NUMBER() OVER(PARTITION BY hcp_veeva_id,hcp_doctor_name,hcp_doctor_hospital order by 1) RN</span><br><span class="line">FROM NS_Allergan_Xlab.hcp_doctor_360_target_rds T where ds&#x3D;&#39;$&#123;dt&#125;&#39;</span><br><span class="line">) A</span><br><span class="line">WHERE A.RN&#x3D;1;</span><br></pre></td></tr></table></figure><h4><span id="6mysql-设置变量参与循环">6.<strong>mysql 设置变量参与循环</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- mysql 设置变量参与循环</span><br><span class="line">while @i&lt;&#x3D;@num DO</span><br><span class="line">set @i&#x3D;@i+1;</span><br></pre></td></tr></table></figure><h4><span id="7mysql-group_concat用法">7.mysql group_concat()用法</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 将group by产生的同一个分组中的值连接起来，返回一个字符串结果。</span><br><span class="line">语法：group_concat( [distinct] 要连接的字段 [order by 排序字段 asc&#x2F;desc  ] [separator &#39;分隔符&#39;] )</span><br><span class="line">例子：select name, group_concat(id) from table_name group by name;</span><br></pre></td></tr></table></figure><h4><span id="8mysql-查看表的最后更新时间">8.MySQL <strong>查看表的最后更新时间</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-- 查看表的最后更新时间</span><br><span class="line">SELECT</span><br><span class="line">    &#96;TABLE_NAME&#96;, &#96;UPDATE_TIME&#96;</span><br><span class="line">FROM</span><br><span class="line">    &#96;information_schema&#96;.&#96;TABLES&#96;</span><br><span class="line">WHERE</span><br><span class="line">    &#96;information_schema&#96;.&#96;TABLES&#96;.&#96;TABLE_SCHEMA&#96; &#x3D; &#39;ieipdb2&#39;</span><br><span class="line">AND</span><br><span class="line">    &#96;information_schema&#96;.&#96;TABLES&#96;.&#96;TABLE_NAME&#96; &#x3D; &#39;s_index_report&#39;;</span><br></pre></td></tr></table></figure><h4><span id="9mysql-查询一个的字段及注释">9.MySQL 查询一个的字段及注释</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-- 查询一个表的所有列名，字段的注释</span><br><span class="line">SELECT</span><br><span class="line">    TABLE_NAME,</span><br><span class="line">    COLUMN_NAME,</span><br><span class="line">    COLUMN_TYPE,</span><br><span class="line">    COLUMN_COMMENT</span><br><span class="line">FROM</span><br><span class="line">    information_schema. COLUMNS</span><br><span class="line">WHERE</span><br><span class="line">    table_schema &#x3D; &#39;allergan_sales_ab&#39;</span><br><span class="line">AND table_name &#x3D; &#39;ods_direction_xlab&#39;;</span><br></pre></td></tr></table></figure><h4><span id="10mysql查询一个表的所有列名数据类型">10.MySQL<strong>查询一个表的所有列名，数据类型</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-- 查询一个表的所有列名，数据类型</span><br><span class="line">select column_name,data_type from information_schema.columns</span><br><span class="line">where table_name &#x3D; &#39;Sys_User&#39;;</span><br></pre></td></tr></table></figure><h4><span id="11根据b表数据更新a表数据">11.<strong>根据b表数据更新A表数据</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">update 表A as a ,表B as b</span><br><span class="line">set a.role_id&#x3D;b.set_value</span><br><span class="line">where a.role_id&#x3D;b.set_key</span><br></pre></td></tr></table></figure><h4><span id="12mysql查询表注释">12.MySQL<strong>查询表注释</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">table_name ,</span><br><span class="line">table_comment</span><br><span class="line">FROM</span><br><span class="line">information_schema.TABLES</span><br><span class="line">WHERE</span><br><span class="line">table_schema &#x3D; &#39;allergan_sales_ab&#39;</span><br><span class="line">and left(TABLE_NAME,3)&#x3D;&#39;ods&#39;</span><br><span class="line">ORDER BY</span><br><span class="line">table_name;</span><br></pre></td></tr></table></figure><h4><span id="13-查看表的大小">13. <strong>查看表的大小</strong></span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(round(sum(data_length&#x2F;1024&#x2F;1024&#x2F;1024),2),&#39;G&#39;) as data from information_schema.tables</span><br><span class="line">where table_schema&#x3D;&#39;allergan_sales_ab&#39; and table_name &#x3D; &#39;tblcrm_doccall_detail_veeva&#39;;</span><br></pre></td></tr></table></figure><h4><span id="14查询字段在哪个表中">14.查询字段在哪个表中</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select table_schema ,table_name   from information_schema.columns where column_name &#x3D; &#39;comparison_approval_status&#39;</span><br></pre></td></tr></table></figure><h4><span id="15mysql实现累加">15.MySQL实现累加</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SET @csum :&#x3D; 0;</span><br><span class="line">SELECT 日期, 净利润, (@csum :&#x3D; @csum + 净利润) AS 累计利润</span><br><span class="line">FROM daily_pnl_view;</span><br></pre></td></tr></table></figure><h4><span id="16行转列-列转行">16.行转列、列转行</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">-- 建测试表</span><br><span class="line">DROP TABLE IF EXISTS tb_score;</span><br><span class="line">CREATE TABLE tb_score(</span><br><span class="line">    id INT(11) NOT NULL auto_increment,</span><br><span class="line">    userid VARCHAR(20) NOT NULL COMMENT &#39;用户id&#39;,</span><br><span class="line">    subject VARCHAR(20) COMMENT &#39;科目&#39;,</span><br><span class="line">    score DOUBLE COMMENT &#39;成绩&#39;,</span><br><span class="line">    PRIMARY KEY(id)</span><br><span class="line">)ENGINE &#x3D; INNODB DEFAULT CHARSET &#x3D; utf8;</span><br><span class="line">-- 插入数据</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;001&#39;,&#39;语文&#39;,90);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;001&#39;,&#39;数学&#39;,92);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;001&#39;,&#39;英语&#39;,80);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;002&#39;,&#39;语文&#39;,88);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;002&#39;,&#39;数学&#39;,90);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;002&#39;,&#39;英语&#39;,75.5);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;003&#39;,&#39;语文&#39;,70);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;003&#39;,&#39;数学&#39;,85);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;003&#39;,&#39;英语&#39;,90);</span><br><span class="line">INSERT INTO tb_score(userid,subject,score) VALUES (&#39;003&#39;,&#39;政治&#39;,82);</span><br><span class="line">-- 行转列 </span><br><span class="line">-- 1.利用case when then 进行行转列 或 if </span><br><span class="line">SELECT userid,</span><br><span class="line">SUM(CASE &#96;subject&#96; WHEN &#39;语文&#39; THEN score ELSE 0 END) as &#39;语文&#39;,</span><br><span class="line">SUM(CASE &#96;subject&#96; WHEN &#39;数学&#39; THEN score ELSE 0 END) as &#39;数学&#39;,</span><br><span class="line">SUM(CASE &#96;subject&#96; WHEN &#39;英语&#39; THEN score ELSE 0 END) as &#39;英语&#39;,</span><br><span class="line">SUM(CASE &#96;subject&#96; WHEN &#39;政治&#39; THEN score ELSE 0 END) as &#39;政治&#39; </span><br><span class="line">FROM tb_score </span><br><span class="line">GROUP BY userid;</span><br><span class="line">-- 2.left join 自关联做限制</span><br><span class="line">select t1.userid,</span><br><span class="line">t1.score as &#39;语文&#39;,</span><br><span class="line">t2.score as &#39;数学&#39;,</span><br><span class="line">t3.score as &#39;英语&#39;,</span><br><span class="line">t4.score as &#39;政治&#39;</span><br><span class="line">from tb_score t1</span><br><span class="line">left join tb_score t2 on t1.userid &#x3D;t2.userid and t2.subject &#x3D;&#39;数学&#39;</span><br><span class="line">left join tb_score t3 on t1.userid&#x3D;t3.userid and t3.subject &#x3D;&#39;英语&#39;</span><br><span class="line">left join tb_score t4 on t1.userid&#x3D;t4.userid and t4.subject &#x3D;&#39;政治&#39;</span><br><span class="line">where t1.subject&#x3D;&#39;语文&#39; group by t1.userid;</span><br><span class="line">-- 列转行。union all 查询每个tag的数据，然后union all和并起来</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>工作总结</title>
      <link href="2021/04/09/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/"/>
      <url>2021/04/09/%E5%B7%A5%E4%BD%9C%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在上海工作了一年2020年3月到2021年3月。人数第一份正式工作感慨很多，也学到了很多。记录下来总结一下，给第一份工作画个句号。包含：对自己职业发展路线的思考以及工作方法的总结。</p></blockquote><span id="more"></span><h3><span id="职业发展路线">职业发展路线</span></h3><p>​    我是以Java工程师的角色应招进入公司的。但发生了偏差，实际从事的是数据方面的工作。没有抱怨，毕竟招聘时，也曾聊过可能会串岗。正式工作内容包含 ETL开发、数据开发、BI开发、运维工作。工作初期还是遇到了很多问题，比如Excel不熟练、各种工具都是大学未曾学到的。所以当时学到很着急，感觉自己哪里都不会。工作一年渐渐进入节奏。也渐渐对数据工作有了兴趣。数据作为所有业务的支持，是最低层的、最基础的、最重要的。通过数据可以直观反映一个公司业务的情况、前提是对数据进行采集、抽取、清洗、探查、转换、分析、展现。数据能够最直接地展示它的价值，其它语言及岗位只是对数据结果进行展示和输出。所以为什么不直接从事数据方面的工作呢！</p><p>​    职业规划：3年内主要做技术积累，期间积累的不仅仅是技术，更多的是对数据分析的方法、对业务的理解。技术总有办法解决，重要的是如何分析数据、如何将数据与业务连接。3年到5年技术管理层，数据解决方案、数据处理架构。5年后纯管理层或者创业，数据分析决策者</p><h3><span id="工作方法">工作方法</span></h3><ul><li>文档：先写文档，再执行。先写文档，再执行。先写文档，再执行。写出来才能说出来。</li><li>工作边界：划清楚自己当前工作的工作边界，以达到某种目的或状态为止。</li><li>清晰：对自己工作范围内的事情要清晰明白，做到心中有把握。对需求要清晰，不懂要问，不能似是而非。</li><li>跳出思考：对某一难以解决的问题，要学会跳出固定思维去解决。不能执拗某个点。</li><li>沟通：有效的沟通能够了解更多自身知识体系外的知识，且做事情更准确有效。说不出来是应为没有写过。</li><li>规范：做东西要符合某一规范，不管是自己的还是企业的，最好是自己的。</li><li>总结：项目结果后要学会总结、反思。</li><li>通用性：不管是文档还是代码都要留有余地或弹性的空间。</li><li>谦逊：保持谦虚的态度，多写、多看、多听。不要眼高手低、多去实践。不低估自己、不高估自己。</li><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQL基础</title>
      <link href="2021/04/07/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/07/%E5%BC%80%E7%AA%97%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍常见的几种开窗函数的用法及区别。包含排序开窗函数和聚合开窗函数。</p></blockquote><span id="more"></span><h4><span id="1创建表语句">1.创建表语句</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists 表名 (</span><br><span class="line">    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,-- not null 非空约束；primary key 主键；auto_increment 自增</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    birth_date DATE,</span><br><span class="line">    sex varchar(4) default &#39;男&#39;, -- default 默认约束</span><br><span class="line">    phone VARCHAR(15) NOT NULL UNIQUE -- unique 唯一性约束</span><br><span class="line">    -- primary key (id) 主键定义也可写在后面</span><br><span class="line">    -- 外键约束：constraint 外键名 foreign key (字段名) references 主表名(主键列)  </span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;0 DEFAULT CHARSET&#x3D;utf8; </span><br><span class="line">-- engin 存储引擎；auto_increment&#x3D;0主键自增从0开始；dedault charset&#x3D;utf8 默认编码格式utf8</span><br></pre></td></tr></table></figure><h4><span id="2常用的开窗函数">2.常用的开窗函数</span></h4><ul><li><strong>排序开窗函数-分区排序：row_number () over()</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">-- 查询每门课程course_name前三名的学生姓名及成绩，要求输出列格式如下：</span><br><span class="line">-- 表名：student_grades 字段名：course_name, number, stu_name, grades</span><br><span class="line">select * </span><br><span class="line">from </span><br><span class="line">(select course_name,</span><br><span class="line">row_number()over(partition by course_name order by grades desc() ) as number ,</span><br><span class="line">stu_name,</span><br><span class="line">grades</span><br><span class="line">from student_grades</span><br><span class="line">) a where a.number&lt;&#x3D;3;</span><br></pre></td></tr></table></figure><ul><li><strong>聚合开窗函数-count()</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select studentId,math,departmentId,classId,</span><br><span class="line">-- 以符合条件的所有行作为窗口</span><br><span class="line">count(math) over() as count1,</span><br><span class="line">-- 以按classId分组的所有行作为窗口</span><br><span class="line">count(math) over(partition by classId) as count2,</span><br><span class="line">-- 以按classId分组、按math排序的所有行作为窗口</span><br><span class="line">count(math) over(partition by classId order by math) as count3,</span><br><span class="line">-- 以按classId分组、按math排序、按 当前行+往前1行+往后2行的行作为窗口</span><br><span class="line">count(math) over(partition by classId order by math rows between 1 preceding and 2 following) as count4</span><br><span class="line">from student_scores where departmentId&#x3D;&#39;department1&#39;;</span><br></pre></td></tr></table></figure><ul><li><p><strong>聚合开窗函数-sum()</strong></p></li><li><p><strong>聚合开窗函数-min()</strong></p></li><li><p><strong>聚合开窗函数-max()</strong></p></li><li><p><strong>聚合开窗函数-avg()</strong></p></li><li><p><strong>聚合开窗函数-first_value()</strong></p></li><li><p><strong>聚合开窗函数-last_value()</strong></p></li><li><p><strong>聚合开窗函数-lag(col,n,default)</strong></p></li><li><p><strong>聚合开窗函数-lead()</strong></p></li><li><p><strong>聚合开窗函数-cume_dist()</strong></p></li></ul><h4><span id="3几种排序函数区别">3.几种排序函数区别</span></h4><ul><li><p>row_number() over()：对相等的值不进行区分，相等的值对应的排名相同，序号从1到n连续。</p></li><li><p>rank() over()：相等的值排名相同，但若有相等的值，则序号从1到n不连续。如果有两个人都排在第3名，则没有第4名。</p></li><li><p>dense_rank() over()：对相等的值排名相同，但序号从1到n连续。如果有两个人都排在第一名，则排在第2名（假设仅有1个第二名）的人是第3个人。</p></li><li><p>ntile( n ) over()：可以看作是把有序的数据集合平均分配到指定的数量n的桶中,将桶号分配给每一行，排序对应的数字为桶号。如果不能平均分配，则较小桶号的桶分配额外的行，并且各个桶中能放的数据条数最多相差1。</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">select id,stu_name,course_name,grades</span><br><span class="line">row_number() over(order by grades) as row_num,</span><br><span class="line">rank() over(order by grades) as rank,</span><br><span class="line">desen_rank() over(order by grades) as desen_rank,</span><br><span class="line">ntile(5) over(order by grades) as ntile</span><br><span class="line">from student_grades;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 开窗函数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQL基础</title>
      <link href="2021/04/07/SQL%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/07/SQL%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍数据库SQL基础语法及相应函数。包含表的增删改查。</p></blockquote><span id="more"></span><h4><span id="1创建表语句">1.创建表语句</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table if not exists 表名 (</span><br><span class="line">    id INT NOT NULL PRIMARY KEY AUTO_INCREMENT,-- not null 非空约束；primary key 主键；auto_increment 自增</span><br><span class="line">    name VARCHAR(50) NOT NULL,</span><br><span class="line">    birth_date DATE,</span><br><span class="line">    sex varchar(4) default &#39;男&#39;, -- default 默认约束</span><br><span class="line">    phone VARCHAR(15) NOT NULL UNIQUE -- unique 唯一性约束</span><br><span class="line">    -- primary key (id) 主键定义也可写在后面</span><br><span class="line">    -- 外键约束：constraint 外键名 foreign key (字段名) references 主表名(主键列)  </span><br><span class="line">) ENGINE&#x3D;InnoDB AUTO_INCREMENT&#x3D;0 DEFAULT CHARSET&#x3D;utf8; </span><br><span class="line">-- engin 存储引擎；auto_increment&#x3D;0主键自增从0开始；dedault charset&#x3D;utf8 默认编码格式utf8</span><br></pre></td></tr></table></figure><h4><span id="2避免在索引上使用计算">2.避免在索引上使用计算</span></h4>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL基础 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>存储过程</title>
      <link href="2021/04/07/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
      <url>2021/04/07/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍存储过程相关知识。主要介绍存储过程优点、概念、分类、创建存储过程、存储过程中使用到的代码块、存储过程与函数区别等。供借鉴学习。</p></blockquote><span id="more"></span><h4><span id="1存储过程概念及分类">1.存储过程概念及分类</span></h4><ul><li>概念：存储过程(stored procedure)是一组为了完成特定功能的SQL语句集合，经编译后存储在服务器端的数据库中，利用存储过程可以加速SQL语句的执行。</li><li>分类：系统存储过程和自定义存储过程。</li></ul><h4><span id="2存储过程优点">2.存储过程优点</span></h4><ul><li>提高应用程序的通用性和可移植性：存储过程创建后，可以在程序中被多次调用，而不必重新编写该存储过程的SQL语句。并且数据库专业人员可以随时对存储过程进行修改，且对程序源代码没有影响，这样就极大的提高了程序的可移植性。</li><li>可以更有效的管理用户操作数据库的权限：在Sql Server数据库中，系统管理员可以通过对执行某一存储过程的权限进行限制，从而实现对相应的数据访问进行控制，避免非授权用户对数据库的访问，保证数据的安全。</li><li>可以提高SQL的速度：存储过程是编译过的，如果某一个操作包含大量的SQL代码或分别被执行多次，那么使用存储过程比直接使用单条SQL语句执行速度快的多。</li><li>减轻服务器的负担：当用户的操作是针对数据库对象的操作时，如果使用单条调用的方式，那么网络上还必须传输大量的SQL语句，如果使用存储过程，则直接发送过程的调用命令即可，降低了网络的负担。</li></ul><h4><span id="1创建存储过程">1.创建存储过程</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">drop procedure if exists &#96;存储过程名&#96;;</span><br><span class="line">delimiter ;;</span><br><span class="line">create procedure &#96;存储过程名&#96;(IN MaterNum char(30),... (参数))</span><br><span class="line">begin</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line">;;</span><br><span class="line">delimiter ;</span><br></pre></td></tr></table></figure><h4><span id="2-调用存储过程">2. 调用存储过程</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CALL 存储过程名(参数); </span><br></pre></td></tr></table></figure><h4><span id="3常用代码块">3.常用代码块</span></h4><ul><li>CASE</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CASE case_value</span><br><span class="line">WHEN when_value THEN</span><br><span class="line">statement_list</span><br><span class="line">ELSE</span><br><span class="line">statement_list</span><br><span class="line">END CASE;</span><br></pre></td></tr></table></figure><ul><li>IF…ELSE</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">IF search_condition THEN</span><br><span class="line">statement_list</span><br><span class="line">ELSE</span><br><span class="line">statement_list</span><br><span class="line">END IF;</span><br></pre></td></tr></table></figure><ul><li>WHILE</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WHILE search_condition DO</span><br><span class="line">statement_list</span><br><span class="line">END WHILE;</span><br></pre></td></tr></table></figure><ul><li>LOOP</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">label: LOOP</span><br><span class="line">statement_list</span><br><span class="line"></span><br><span class="line">IF exit_condition THEN</span><br><span class="line">LEAVE label; </span><br><span class="line">END IF; </span><br><span class="line">END LOOP label;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 存储过程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库SQL优化</title>
      <link href="2021/04/07/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E8%B0%83%E4%BC%98/"/>
      <url>2021/04/07/%E6%95%B0%E6%8D%AE%E5%BA%93sql%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍SQL的调优。SQL调优对项目的性能来讲至关重要,所有掌握常见的SQL调优方式是必不可少的,下面介绍几种常见的SQL的调优方式,供借鉴学习。来源于 CSDN <a href="https://lss0555.blog.csdn.net/">lss0555</a></p></blockquote><span id="more"></span><h4><span id="1创建索引">1.创建索引</span></h4><ul><li>要尽量避免全表扫描，首先应考虑在 where 及 order by 涉及的列上建立索引</li><li>在经常需要进行检索的字段上创建索引</li><li>创建索引给检索带来的性能提升往往是巨大的，因此在发现检索速度过慢的时候应该首先想到的就是创建索引</li><li>一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要。索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，视具体情况而定。</li></ul><h4><span id="2避免在索引上使用计算">2.避免在索引上使用计算</span></h4><p>效率低：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where salary*22&gt;11000(salary是索引列)</span><br></pre></td></tr></table></figure><p>效率高：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from user where salary&gt;11000&#x2F;22(salary是索引列)</span><br></pre></td></tr></table></figure><h4><span id="3使用预编译查询">3.使用预编译查询</span></h4><p>程序中通常是根据用户的输入来动态执行SQL，这时应该尽量使用参数化SQL,这样不仅可以避免SQL注入漏洞<br>攻击，最重要数据库会对这些参数化SQL进行预编译，这样第一次执行的时候DBMS会为这个SQL语句进行查询优化<br>并且执行预编译，这样以后再执行这个SQL的时候就直接使用预编译的结果，这样可以大大提高执行的速度。</p><h4><span id="4调整where字句中的连接顺序">4.调整Where字句中的连接顺序</span></h4><p>DBMS一般采用自下而上的顺序解析where字句，根据这个原理表连接最好写在其他where条件之前，那些可以<br>过滤掉最大数量记录。</p><h4><span id="5尽量将多条sql语句压缩到一句sql中">5.尽量将多条SQL语句压缩到一句SQL中</span></h4><p>每次执行SQL的时候都要建立网络连接、进行权限校验、进行SQL语句的查询优化、发送执行结果，这个过程<br>是非常耗时的，因此应该尽量避免过多的执行SQL语句，能够压缩到一句SQL执行的语句就不要用多条来执行。</p><h4><span id="6用where字句替换having字句">6.用where字句替换HAVING字句</span></h4><p>避免使用HAVING字句，因为HAVING只会在检索出所有记录之后才对结果集进行过滤，而where则是在聚合前<br>刷选记录，如果能通过where字句限制记录的数目，那就能减少这方面的开销。HAVING中的条件一般用于聚合函数<br>的过滤，除此之外，应该将条件写在where字句中。</p><h4><span id="7使用表的别名">7.使用表的别名</span></h4><p>当在SQL语句中连接多个表时，请使用表的别名并把别名前缀于每个列名上。这样就可以减少解析的时间并减<br>少哪些友列名歧义引起的语法错误。</p><h4><span id="8用union-all替换union">8.用union all替换union</span></h4><p>当SQL语句需要union两个查询结果集合时，即使检索结果中不会有重复的记录，如果使用union这两个结果集<br>同样会尝试进行合并，然后在输出最终结果前进行排序，因此如果可以判断检索结果中不会有重复的记录时候，应<br>该用union all，这样效率就会因此得到提高。</p><h4><span id="9考虑使用临时表暂存中间结果">9.考虑使用“临时表”暂存中间结果</span></h4><p>简化SQL语句的重要方法就是采用临时表暂存中间结果，但是，临时表的好处远远不止这些，将临时结果暂存在临时表，后面的查询就在tempdb中了，这可以避免程序中多次扫描主表，也大大减少了程序执行中“共享锁”阻塞“更新锁”，减少了阻塞，提高了并发性能。<br>但是也得避免频繁创建和删除临时表，以减少系统表资源的消耗。</p><h4><span id="10只在必要的情况下才使用事务">10.只在必要的情况下才使用事务</span></h4><p>SQL Server中一句SQL语句默认就是一个事务，在该语句执行完成后也是默认commit的。其实，这就是begin tran的一个最小化的形式，好比在每句语句开头隐含了一个begin tran，结束时隐含了一个commit。<br>有些情况下，我们需要显式声明begin tran，比如做“插、删、改”操作需要同时修改几个表，要求要么几个表都修改成功，要么都不成功。begin tran 可以起到这样的作用，它可以把若干SQL语句套在一起执行，最后再一起commit。 好处是保证了数据的一致性，但任何事情都不是完美无缺的。Begin tran付出的代价是在提交之前，所有SQL语句锁住的资源都不能释放，直到commit掉。<br>可见，如果Begin tran套住的SQL语句太多，那数据库的性能就糟糕了。在该大事务提交之前，必然会阻塞别的语句，造成block很多。<br>Begin tran使用的原则是，在保证数据一致性的前提下，begin tran 套住的SQL语句越少越好！有些情况下可以采用触发器同步数据，不一定要用begin translation。</p><h4><span id="11尽量避免使用游标">11.尽量避免使用游标</span></h4><p>尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理。因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。</p><h4><span id="12用varcharnvarchar-代替-charnchar">12.用varchar/nvarchar 代替 char/nchar</span></h4><p>尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。<br>不要以为 NULL 不需要空间，比如：char(100) 型，在字段建立时，空间就固定了， 不管是否插入值（NULL也包含在内），都是占用 100个字符的空间的，如果是varchar这样的变长字段， null 不占用空间。</p><h4><span id="13查询select语句优化">13.查询select语句优化</span></h4><p>1.任何地方都不要使用 select * from t ，用具体的字段列表代替“*”，不要返回用不到的任何字段<br>2.应尽量避免在 where 子句中对字段进行 null 值判断，否则将导致引擎放弃使用索引而进行全表扫描，<br>如：</p><pre><code> select id from t where num is null           </code></pre><p>可以在num上设置默认值0，确保表中num列没有null值，<br>然后这样查询：</p><pre><code>  select id from t where num=0  select id from t where num=10 or num=20</code></pre><p>可以这样查询：</p><pre><code>  select id from t where num=10   union all  select id from t where num=20</code></pre><p>4.不能前置百分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select id from t where name like ‘%abc%’</span><br></pre></td></tr></table></figure><p>若要提高效率，可以考虑全文检索。</p><pre><code> select id from t where num in(1,2,3)</code></pre><p>5.对于连续的数值，能用 between 就不要用 in 了：</p><pre><code>select id from t where num between 1 and 3 </code></pre><p>6.如果查询的两个表大小相当，那么用in和exists差别不大。<br>例如：表A（小表），表B（大表）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from A where cc in (select cc from B) 效率低，用到了A表上cc列的索引；     </span><br><span class="line">select * from A where exists(select cc from B where cc&#x3D;A.cc)   效率高，用到了B表上cc列的索引。   </span><br></pre></td></tr></table></figure><p>相反的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from B where cc in (select cc from A)  效率高，用到了B表上cc列的索引；</span><br><span class="line">select * from B where exists(select cc from A where cc&#x3D;B.cc)  效率低，用到了A表上cc列的索引。</span><br></pre></td></tr></table></figure><h4><span id="14更新update语句优化">14.更新Update语句优化</span></h4><p>如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志。</p><h4><span id="15插入insert语句优化">15.插入Insert语句优化</span></h4><p>在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SQL优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETL基础知识</title>
      <link href="2021/04/04/ETL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>2021/04/04/ETL%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<blockquote><p>介绍ETL数据同步基础知识。包含ETL概念和简介，ETL抽取策略。</p></blockquote><h3><span id="概念">概念</span></h3><p>ETL即数据抽取（Extract）、转换（Transform）、装载（Load）的过程。</p><h3><span id="抽取策略">抽取策略</span></h3><ul><li>时间戳方式</li></ul><p>需要在<em>OLTP</em>（<strong>联机事务处理系统）</strong>系统中业务表中统一添加时间字段作为时戳（如表中已有相应的时间字段，可以不必添加），每当<em>OLTP</em>系统中更新修改业务数据时，必须同时修改时戳字段值。当作<em>ETL</em>加载时，通过系统时间与时戳字段的比较来决定进行何种数据抽取。</p><p>​    优点：<em>ETL</em>系统设计清晰，源数据抽取相对清楚简单，速度快。<strong>可以实现数据的递增加载</strong>。</p><p>​    缺点：时戳维护需要由<em>OLTP</em>系统完成，需要修改原<em>OLTP</em>系统中业务表结构；且所有添加时戳的表，在业务系统中，数据发生变化时，同时更新时戳字段，需要对原<em>OLTP</em>系统业务操作程序作修改，工作量大，改动面大，风险大。但如果业务表在最初设计的时候考虑到这点，应用此方案是最好的选择。</p><ul><li>日志表方式</li></ul><p>在<em>OLTP</em>系统中添加系统日志表，当业务数据发生变化时，更新维护日志表内容，当作<em>ETL</em>加载时，通过读日志表数据决定加载那些数据及如何加载。</p><p>​    优点：不需要修改<em>OLTP</em>表结构，源数据抽取清楚，速度较快。<strong>可以实现数据的递增加载。</strong></p><p>​    缺点：日志表维护需要由<em>OLTP</em>系统完成，需要对<em>OLTP</em>系统业务操作程序作修改，记录日志信息。日志表维护较为麻烦，对原有系统有较大影响。工作量较大，改动较大，有一定风险。</p><ul><li>全表比对方式</li></ul><p>在<em>ETL</em>过程中，抽取所有源数据，并进行相应规则转换，完成后先不插入目标，而对每条数据进行目标表比对。根据主键值进行插入与更新的判定，目标表已存在该主键值的，表示该记录已有，并进行其余字段比对，如有不同，进行<em>Update</em>操作，如目标表没有存在该主键值，表示该记录还没有，即进行<em>Insert</em>操作。</p><p>优点：对已有系统表结构不产生影响，不需要修改业务操作程序，所有抽取规则由<em>ETL</em>完成，管理维护统一，可以实现数据的递增加载，没有风险。</p><p>缺点：<em>ETL</em>比对较复杂，设计较为复杂，速度较慢</p><ul><li>全表删除插入方式</li></ul><p>每次<em>ETL</em>操作均删除目标表数据，由<em>ETL</em>全新加载数据。</p><p>​    优点：<em>ETL</em>加载规则简单，速度快。</p><p>​    缺点：对于维表加代理键不适应，当<em>OLTP</em>系统产生删除数据操作时，<em>OLAP</em>层将不会记录到所删除的历史数据。不可以实现数据的递增加载。</p><ul><li>设置触发器方式</li></ul><p>通过在源系统的数据库中设置触发器，每当有<em>Update</em>、<em>Insert</em>、<em>Delete</em>操作时触发一个事件将发生改变的记录抽取到相应的临时表中。</p><p>​    优点：<em>ETL</em>加载规则简单，速度快，不需要修改<em>OLTP</em>表结构，可以实现数据的递增加载。</p><p>​    缺点：对源系统性能有一些影响。需建立一张临时表。</p><ul><li>Oracle 变化数据捕捉（CDC 方式）</li></ul><p><em>CDC</em>特性是在<em>Oracle9i</em>数据库中引入的，它简化了识别自上次提取后发生变化的数据的过程。<em>CDC</em>能够帮助识别从上次提取之后发生变化的数据。利用<em>CDC</em>，在对源表进行<em>Update</em>、<em>Insert</em>或<em>Delete</em>等操作的同时就可以提取数据，并且变化的数据被保存在数据库的变化表中。这样就可以捕获发生变化的数据，然后利用数据库视图以一种可控的方式提供给目标系统。</p><h3><span id="附">附</span></h3><h4><span id="oltp-olap">OLTP OLAP</span></h4><p>从字面上来看OLTP是做事务处理，OLAP是做分析处理。从对数据库操作来看，OLTP主要是对数据的增删改，OLAP是对数据的查询。</p>]]></content>
      
      
      <categories>
          
          <category> ETL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ETL基础知识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>引用pdf测试</title>
      <link href="2021/04/04/book/"/>
      <url>2021/04/04/book/</url>
      
        <content type="html"><![CDATA[<div class="row">    <embed src="QlikView.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo切换主题</title>
      <link href="2021/04/03/Hexo%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98/"/>
      <url>2021/04/03/Hexo%E5%88%87%E6%8D%A2%E4%B8%BB%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文主要介绍如何修改Hexo主题，包含一些详细配置如：配置标签、配置分类、配置站内搜索功能、设置代码高亮、设置头像、设置Next主题、设置文章内容加载图片、上传pdf并展示。其中也有一些错误记录。整体按照顺序描述配置过程。</p></blockquote><span id="more"></span><h4><span id="获取开源的-hexo-主题">获取开源的 Hexo 主题</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone git:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><h4><span id="修改主题-_configyml">修改主题 _config.yml</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><h4><span id="运行测试">运行测试</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><ul><li>页面报错一</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--hexo使用theme出现“ &#123;% extends ‘_layout.swig‘ %&#125; &#123;% import ‘_macro&#x2F;post.swig‘ as post_template %&#125;“问题</span><br><span class="line">-- 原因是hexo在5.0之后把swig给删除了需要自己手动安装</span><br><span class="line">-- 解决办法：</span><br><span class="line">npm i hexo-renderer-swig</span><br></pre></td></tr></table></figure><ul><li>页面报错二</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Cannot GET &#x2F;%20%20</span><br><span class="line">原因:主题配置文件 || 之后加多了空格</span><br></pre></td></tr></table></figure><h4><span id="配置标签和分类">配置标签和分类</span></h4><ul><li>在git bash 中输入以下代码创建相应的page：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo new page &quot;tags&quot;</span><br><span class="line">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure><ul><li>在第一步完成后会在source文件夹中出现tags和categories的文件夹，在各自的文件夹里打开index.md文件进行修改(多加上一个type属性、注意其他主题可能是layout属性)：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">title: categories</span><br><span class="line">date: 2020-03-15 14:19:53</span><br><span class="line">type: &quot;categories&quot;</span><br></pre></td></tr></table></figure><h4><span id="配置搜索功能">配置搜索功能</span></h4><ul><li>next自带一个搜索功能，可以实现对站内内容的搜索。<br>首先需要通过如下命令安装对应的搜索插件：<br>然后在全局的配置文件（hexoblog目录下的_config.yml）中，增加配置如下内容：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Search Config</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 100</span><br></pre></td></tr></table></figure><ul><li>然后在git hash 中加载相应的插件：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><ul><li>打开主题内的配置文件，找到 local_search 属性，配置开启本地搜索功能。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure><h4><span id="设置代码高亮">设置代码高亮</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available value: normal | night | night eighties | night blue | night bright</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;chriskempson&#x2F;tomorrow-theme</span><br><span class="line">highlight_theme: night</span><br></pre></td></tr></table></figure><h4><span id="修改语言">修改语言</span></h4><p>j进入<code>\languages</code>文件夹，有zh-Hans.yml 文件 修改名称为zh-CN.yml ,然后设置主题语言选项为zh-CN</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure><h4><span id="设置头像">设置头像</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">avatar: &#x2F;images&#x2F;avatar.gif</span><br></pre></td></tr></table></figure><ul><li><p>修改头像为圆形、旋转动画</p></li><li><p>修改<code>themes\next\source\css\_common\components\sidebar\sidebar-author.styl</code>,新增以下代码:</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: 0 auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: $site-author-image-border-width solid $site-author-image-border-color;</span><br><span class="line">  &#x2F;&#x2F;设置圆形</span><br><span class="line">+  border-radius: 50%;</span><br><span class="line">+  transition: 2s all;</span><br><span class="line">&#125;</span><br><span class="line">   &#x2F;&#x2F;旋转</span><br><span class="line">+ .site-author-image:hover&#123;</span><br><span class="line">+   transform: rotate(360deg);</span><br><span class="line">+ &#125;</span><br></pre></td></tr></table></figure><h4><span id="主题设定">主题设定</span></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#scheme: Muse</span><br><span class="line">scheme: Mist</span><br><span class="line">#scheme: Pisces</span><br><span class="line">#scheme: Gemini</span><br></pre></td></tr></table></figure><h4><span id="加载图片">加载图片</span></h4><ul><li>修改主配置文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><ul><li>图片引用设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">在source下创建&#x2F;images文件夹，先把图片xx.jpg&#x2F;png复制到这个文件夹</span><br><span class="line">最后在xxxx.md中想引入图片时，只需要在xxxx.md中按照markdown的格式引入图片：</span><br><span class="line">![想输入的提示名字，可不输入](&#x2F;images&#x2F;xx.jpg)</span><br></pre></td></tr></table></figure><ul><li>遇到错误</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">运行之后遇到以下错误</span><br><span class="line">update link as:--&gt;&#x2F;.com&#x2F;&#x2F;blog\source_posts\article-name\image-20210309010643180.png</span><br><span class="line">update link as:--&gt;&#x2F;.com&#x2F;&#x2F;image-20210309010643180.png</span><br><span class="line">update link as:--&gt;&#x2F;.com&#x2F;&#x2F;blog\source_posts\article-name\image-20210309010643180.png</span><br><span class="line">update link as:--&gt;&#x2F;.com&#x2F;&#x2F;image-20210309010643180.png</span><br></pre></td></tr></table></figure><ul><li>解决办法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- 在hexo的目录下执行</span><br><span class="line">npm install https:&#x2F;&#x2F;github.com&#x2F;CodeFalling&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure><h4><span id="上传pdf">上传pdf</span></h4><ul><li>安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save hexo-pdf</span><br></pre></td></tr></table></figure><ul><li>配置页面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-- 基于上传图片，与上传图片类似，只是将链接引用换成pdf</span><br><span class="line">-- 在source下创建&#x2F;pfd文件夹，先把pdf复制到这个文件夹</span><br><span class="line">-- 最后在xxxx.md中想引入pdf时，只需要在xxxx.md中按照相应格式引入pdf：</span><br><span class="line">外部链接：</span><br><span class="line">&#123;% pdf http:&#x2F;&#x2F;7xov2f.com1.z0.glb.clouddn.com&#x2F;bash_freshman.pdf %&#125;</span><br><span class="line">本地连接：</span><br><span class="line">&#123;% pdf .&#x2F;pdf名字.pdf %&#125;</span><br><span class="line">-- 图片使用中文名称引用时会造成中文会乱码，无法正常显示，暂时没有解决</span><br></pre></td></tr></table></figure><h4><span id="修改标签云颜色">修改标签云颜色</span></h4><ul><li>修改<code>themes/next/layout/page.swig</code>文件，加入自定义样式:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- &#123;&#123; tagcloud(&#123;min_font: 12, max_font: 30, amount: 300, color: true, start_color: &#39;#ccc&#39;, end_color: &#39;#111&#39;&#125;) &#125;&#125;</span><br><span class="line">+ &#123;&#123; tagcloud(&#123;min_font: 13, max_font: 31, amount: 1000, color: true, start_color: &#39;#9733EE&#39;, end_color: &#39;#FF512F&#39;&#125;) &#125;&#125;</span><br></pre></td></tr></table></figure><h4><span id="修改首页文章间隔宽度">修改首页文章间隔宽度</span></h4><ul><li>打开<code>\themes\next\source\css\_schemes\Mist\_posts-expanded.styl</code> ，修改.post{}</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.post</span> &#123; <span class="attribute">margin-top</span>: <span class="number">12px</span>; &#125;</span><br></pre></td></tr></table></figure><h4><span id="修改文章页宽">修改文章页宽</span></h4><ul><li>打开<code>themes/next/source/css/_variables/base.styl</code>，找到以下字段并修改为合适的宽度：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- $content-desktop-large          &#x3D; 900px</span><br><span class="line">+ $content-desktop-large          &#x3D; 1000px</span><br></pre></td></tr></table></figure><h4><span id="修改首页文章页宽">修改首页文章页宽</span></h4><ul><li>打开<code>themes/next/source/css/_variables/base.styl</code>，找到以下字段并修改为合适的宽度：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">- $content-desktop            &#x3D; 700px</span><br><span class="line">+ $content-desktop                &#x3D; 900px</span><br></pre></td></tr></table></figure><h4><span id="上一页下一页-按钮错误显示">‘上一页’，‘下一页’ 按钮错误显示</span></h4><p>打开<code>next &gt; layout &gt; _partials &gt; pagination.swig</code> ，将错误的html代码改为‘下一页’和‘上一页’即可！</p><h4><span id="sidebar中post点击出错">sidebar中post点击出错</span></h4><p>我是直接将链接去除了。打开<code>next &gt; layout &gt; _macro &gt; sidebar.swig</code> </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- &lt;a href&#x3D;&quot;&#123;&#123; url_for(theme.menu.archives).split(&#39;||&#39;)[0] | trim &#125;&#125;&quot;&gt;</span><br><span class="line">- &lt;a href&#x3D;&quot;&#123;&#123; url_for(config.archive_dir) &#125;&#125;&quot;&gt;</span><br><span class="line">+ &lt;a href&#x3D;&quot;&quot;&gt;</span><br><span class="line">+ &lt;a href&#x3D;&quot;&quot;&gt;</span><br></pre></td></tr></table></figure><h4><span id="主页footer内容不居中">主页footer内容不居中</span></h4><p>打开<code>next\source\css\_schemes\Mist\index.styl</code>，.footer-inner中的text-align改为center</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ETL流服务器迁移部署</title>
      <link href="2021/03/30/ETL%E6%B5%81%E9%83%A8%E7%BD%B2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB/"/>
      <url>2021/03/30/ETL%E6%B5%81%E9%83%A8%E7%BD%B2-%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB/</url>
      
        <content type="html"><![CDATA[<blockquote><p>数据同步的ETL流服务器遭到挖矿程序侵入。经慎重考虑、迁移服务器。其中包括分用户、sftp用户的创建、SFTP、crontab、kettle、jdk、vnc相关服务的安装。记录生产环境相关文件的位置。配置任务、启动任务、以及在迁移部署中的一些改动。也包含服务器迁移之后其他平台的改动如：中转机、Dataworks。</p></blockquote><span id="more"></span><p>老的服务器版本：CentOS Linux release 7.6.1810</p><p>新的服务器版本：CentOS Linux release 7.9.2009</p><p>新服务器位置：华东2（上海）syp-etl</p><h3><span id="一-创建分用户">一、创建分用户</span></h3><ul><li><p>一版情况下禁止以root用户登录系统</p></li><li><p>创建分用户sy-devops-user，开启sudo权限</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">为普通用户添加sudo权限</span><br><span class="line">1.root用户下创建分用户</span><br><span class="line">eg: useradd syp-devops-user</span><br><span class="line">2.vim &#x2F;etc&#x2F;sudoers &#x2F;&#x2F;打开sudo的配置文件</span><br><span class="line">3.在“root ALL&#x3D;(ALL)ALL”这一行下面，加入一行： 用户名 ALL&#x3D;(ALL) ALL</span><br><span class="line">eg:syp-devops-user ALL&#x3D;(ALL) ALL</span><br></pre></td></tr></table></figure><h3><span id="二-安装相关服务">二、安装相关服务</span></h3><ul><li>sftp</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.安装&#x2F;卸载vsftpd服务</span><br><span class="line">yum -y install vsftpd</span><br><span class="line">yun remove vsftpd</span><br><span class="line">2.创建sftp用户</span><br><span class="line">useradd -d &#x2F;home&#x2F;username username</span><br><span class="line">3.启动|关闭|重启|查看vsftpd服务器</span><br><span class="line">service vsftpd start|stop|restart|status</span><br><span class="line">4.设置sftp用户密码，尽量与原来密码一致</span><br><span class="line">passwd username</span><br><span class="line">5.通知Allergan配置数据库访问白名单 </span><br><span class="line">6.通知供应商上传服务器ip改变</span><br><span class="line">7.设置开机启动</span><br><span class="line">systemctl enable vsftpd.service</span><br></pre></td></tr></table></figure><ul><li>crontab</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">1.安装&#x2F;卸载crontab服务</span><br><span class="line">yum install -y crontabs</span><br><span class="line">yun remove crontabs</span><br><span class="line">2.启动|关闭|重启|查看服务状态</span><br><span class="line">service crond start|stop|restart|status</span><br><span class="line">3.配置定时任务,查看定时任务&#x2F;编辑定时任务</span><br><span class="line">crontab -l&#x2F;-e</span><br><span class="line">配置：minute hour day(month) month day(week)</span><br><span class="line">4.设置开机启动</span><br><span class="line">在&#x2F;etc&#x2F;rc.d&#x2F;rc.local 脚本中加入一行：&#x2F;sbin&#x2F;service crond start </span><br></pre></td></tr></table></figure><ul><li>kettle</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.下载kettle安装包，当前使用版本8.2</span><br><span class="line">https:&#x2F;&#x2F;sourceforge.net&#x2F;projects&#x2F;pentaho&#x2F;files&#x2F;Data%20Integration&#x2F;</span><br><span class="line">2.通过sftp上传到服务器</span><br><span class="line">解压，kettle无需安装，运行spoon.sh</span><br><span class="line">3.设置桌面快捷方式、桌面创建kettle.desktop文件</span><br><span class="line">[Desktop Entry]</span><br><span class="line">Encoding&#x3D;UTF-8</span><br><span class="line">Name&#x3D;kettle</span><br><span class="line">Exec&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;kettle-8.2.0.0_342&#x2F;spoon.sh</span><br><span class="line">Icon&#x3D;&#x2F;usr&#x2F;local&#x2F;src&#x2F;kettle-8.2.0.0_342&#x2F;spoon.png</span><br><span class="line">Terminal&#x3D;false</span><br><span class="line">Type&#x3D;Application</span><br><span class="line">Categories&#x3D;Application;</span><br></pre></td></tr></table></figure><ul><li>jdk</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.下载jdk的linux版本安装包，当前版本8</span><br><span class="line">2.通过sftp上传到服务器</span><br><span class="line">3.安装位置：&#x2F;url&#x2F;java&#x2F;jdk1.8.0_271-amd64</span><br><span class="line">4.环境变量配置</span><br><span class="line">配置文件：&#x2F;etc&#x2F;profile</span><br><span class="line">内容：</span><br><span class="line">export JAVA_HOME&#x3D;&#x2F;user&#x2F;java&#x2F;jdk1.8.0_271-amd64</span><br><span class="line">exprot PATH&#x3D;$JAVA_HOME&#x2F;bin:$PATH</span><br><span class="line">export CLASSPATH&#x3D;.:$JAVA_HOME&#x2F;lib&#x2F;tools.jar</span><br></pre></td></tr></table></figure><ul><li>vnc</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">1.安装VNC 默认port:5901</span><br><span class="line">yum install -y tigervnc-server vnc</span><br><span class="line">2.启动桌面进程方式</span><br><span class="line">systemctl enable vncserver@:1.service</span><br><span class="line">systemctl start vncserver@:1.service</span><br><span class="line">3.查看运行的桌面</span><br><span class="line">vncserver -list</span><br><span class="line">4.查看某个桌面进程的状态</span><br><span class="line">systemctl status vncserver@:1.service</span><br><span class="line">5.杀掉某个桌面</span><br><span class="line">vncserver -kill :1</span><br><span class="line">6.设置Vnc密码</span><br><span class="line">vncpasswd</span><br></pre></td></tr></table></figure><ul><li>通过阿里云自带的vnc连接</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1.阿里云平台-&gt;控制台-&gt;云服务器ESC-&gt;对应服务器-&gt;远程连接-&gt;选择VNC远程连接</span><br></pre></td></tr></table></figure><ul><li>CentOS 中文化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">1.查看当前语言</span><br><span class="line">echo $LANG</span><br><span class="line">2.查看当前支持的所有语言，如果有“zh_cn”则有中文</span><br><span class="line">locale</span><br><span class="line">3.安装中文语言包</span><br><span class="line"> centos7：yum install kde-l10n-Chinese   centos6:yum groupinstall Chinese-support</span><br><span class="line">4.查看是否安装成功</span><br><span class="line">locale -a | grep &quot;zh_CN&quot;</span><br><span class="line">5.备份修改配置文件</span><br><span class="line">cp &#x2F;etc&#x2F;locale.conf &#x2F;home&#x2F;locale.conf.backup</span><br><span class="line">vim &#x2F;etc&#x2F;locale.conf</span><br><span class="line">将LANG&#x3D;en_US.UTF-8改成 LANG&#x3D;zh_CN.UTF-8</span><br><span class="line">保存退出</span><br><span class="line">6.重启</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3><span id="三-迁移相关文件">三、迁移相关文件</span></h3><ul><li>新建文件夹</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">脚本存储位置：mkdir &#x2F;data&#x2F;work&#x2F;scripts</span><br><span class="line">数据文件存储位置:mkdir &#x2F;data&#x2F;allergan</span><br><span class="line">日志存储位置：mkdir &#x2F;data&#x2F;work&#x2F;logs</span><br><span class="line">根据业务创建不同文件夹存储不同的数据</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_ali_online</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_finance</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_sales_ab</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_sales_calls-csv</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_sales_ab-csv</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_dingtalk</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_members</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;from_transit_computer</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_members&#x2F;etocrmdata</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_members&#x2F;etocrm_data</span><br><span class="line">mkdir &#x2F;data&#x2F;allergan&#x2F;allergan_members&#x2F;executed_file</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>创建SFTP用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">中转机：allergan_sales_ab 主目录：&#x2F;data&#x2F;allergan&#x2F;allergan_sales_ab</span><br><span class="line">小艾数据：allergan_members 主目录：&#x2F;data&#x2F;allergan&#x2F;alergan_members</span><br><span class="line">eg:</span><br><span class="line">useradd  &#x2F;data&#x2F;allergan&#x2F;allergan_sales_ab -g whell allergan_sales_ab</span><br><span class="line">useradd  &#x2F;data&#x2F;allergan&#x2F;allergan_members -g allergan_members allergan_members</span><br><span class="line">注意修改主目录的权限给各个用户</span><br><span class="line">eg:</span><br><span class="line">chown -R allergan_members.allergan_members &#x2F;data&#x2F;allergan&#x2F;alllergan_members</span><br><span class="line">chown -R allergan_sales_ab.whell &#x2F;data&#x2F;allergan&#x2F;allergan_sales_ab</span><br><span class="line">修改配置文件vsftpd.conf,将sftp用户限制在主目录中</span><br><span class="line">eg:</span><br><span class="line">vim &#x2F;etc&#x2F;vsftpd&#x2F;vsftpd.conf</span><br><span class="line">修改chroot_local_user&#x3D;YES # 将SFTP本地用户禁锢在宿主目录中</span><br></pre></td></tr></table></figure><ul><li>迁移文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">方法一：</span><br><span class="line">使用xftp等工具，将老的Etl服务器的脚本拿出，再通过xftp等工具放入到新的服务器中</span><br><span class="line">方法二：</span><br><span class="line">进入老的ETL服务器终端直接使用命令</span><br><span class="line">eg:</span><br><span class="line">scp &#x2F;data&#x2F;allergan -r  root@etl.idata.mobi:&#x2F;data&#x2F;</span><br><span class="line">scp &#x2F;data&#x2F;work&#x2F;scripts -r  root@etl.idata.mobi:&#x2F;data&#x2F;work&#x2F;</span><br></pre></td></tr></table></figure><h3><span id="四-配置启动相关任务">四、配置启动相关任务</span></h3><ul><li>crontab 定时任务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">1.crontab定时任务配置</span><br><span class="line">eg:crontab -e </span><br><span class="line">写入</span><br><span class="line">00 07 * * * &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;members_fans&#x2F;tools.sh</span><br><span class="line">30 07 * * * &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;members_fans_azure&#x2F;tools.sh</span><br><span class="line">25 06 * * * &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;user_questionnaires&#x2F;tools.sh</span><br><span class="line">30 06 * * * &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;user_questionnaires_azure&#x2F;tools.sh</span><br><span class="line">20 19 * * * &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;user_behaviors&#x2F;tools.sh</span><br><span class="line">30 19 * * * &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;user_behaviors_azure&#x2F;tools.sh</span><br><span class="line">00 00 * * 0 &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;sales_ab&#x2F;tools.sh</span><br><span class="line">00 00 * * 0 &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;sales_ab_azure&#x2F;tools.sh</span><br><span class="line"># 00 06 * * 0 &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;amap&#x2F;tools.sh</span><br><span class="line"># 00 06 * * 0 &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;amap_azure&#x2F;tools.sh</span><br><span class="line">30 22 * * 0 &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;digital_ami&#x2F;tools.sh</span><br><span class="line">30 22 * * 0 &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;digital_ami_azure&#x2F;tools.sh</span><br><span class="line">00 01 * * * &#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;transit_computer_azure&#x2F;tools.sh</span><br><span class="line">2.注意修改文件为可执行文件</span><br><span class="line">eg:chmod +x &#x2F;data&#x2F;work&#x2F;scritps&#x2F;allergan&#x2F;digital_ami_azure&#x2F;tools.sh</span><br><span class="line">2.重启crontab</span><br><span class="line">service crond restart</span><br></pre></td></tr></table></figure><h3><span id="五-其他修改新增">五、其他(修改+新增)</span></h3><ul><li>中转机ETL流任务修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">有两个ETL流任务中需要添加一个sftp上传,将销售相关数据上传一份到新的ETL流服务器</span><br><span class="line">脚本位置：</span><br><span class="line">D:&#x2F;customer-client&#x2F;allergan_data_etl.kjb</span><br><span class="line">D:&#x2F;customer-client&#x2F;allergan_data_etl_hospital.kjb</span><br></pre></td></tr></table></figure><ul><li>Dataworks任务流修改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.数据集成，添加数据源FTP</span><br><span class="line">2.修改节点：amap_hospital_name_ftp_to_odps的数据源</span><br><span class="line">注：这个节点是直接从etl流服务器拿数据</span><br></pre></td></tr></table></figure><ul><li>脚本任务有改动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.用户问卷</span><br><span class="line">更新频率：日</span><br><span class="line">齐数上传时间：6:00</span><br><span class="line">任务执行时间：7:00（azure）7:10（ali）</span><br><span class="line">文件名称：user_questionnaire_detail_时间戳.zip</span><br><span class="line">执行顺序：先入库azure,再入库ali</span><br><span class="line">流程：拷贝文件到executed_file中一份，再重命名文件为questionnaire_details.zip，再执行kjb（azure）脚本将文件解压到etocrm_data中并删除questionnaire_details.zip文件。读取解压后的美丽问卷.csv到数据库中。ali脚本直接运行kjb，读取美丽问卷.csv,不再需要解压缩。</span><br></pre></td></tr></table></figure><ul><li>Menarini脚本需要改动</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.menarini的数据上传地址需要改动etl.idata.mobi</span><br><span class="line">Teamviewer连接menarini远程公共机</span><br><span class="line">kettle位置：C:\WorkSpace\pdi-ce-9.0.0.0-423\data-integration</span><br><span class="line">脚本位置：C:\WorkSpace\Menarini\kettle\sftp_table.kjb</span><br></pre></td></tr></table></figure><ul><li>增加任务流程 中转机需要每天更新的表DDI</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">1.中转机</span><br><span class="line">中转机脚本位置：D:\customer-client\allergan_data_every_day.kjb</span><br><span class="line">kettle程序位置：E:\Download\kettle\data-integration</span><br><span class="line">自动化脚本位置：C:\Users\SYWin02\Desktop\every_day_job.bat</span><br><span class="line">定时设置步骤：计算机管理-&gt;任务计划程序-&gt;创建基本任务</span><br><span class="line">定时任务名称：每天同步到etl.idata.mobi服务器的数据定时任务</span><br><span class="line">运行日志脚本位置：D:\log\every_day时间戳.log</span><br><span class="line">2.ETL服务器</span><br><span class="line">脚本位置：&#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;transit_computer_azure</span><br><span class="line">日志位置：&#x2F;data&#x2F;work&#x2F;log&#x2F;transit_computer_azure_时间戳.log</span><br><span class="line">接受数据文件位置：&#x2F;data&#x2F;allergan&#x2F;from_transit_computer</span><br></pre></td></tr></table></figure><ul><li>增加任务流程 验真扫码数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1.ETL服务器</span><br><span class="line">脚本位置：&#x2F;data&#x2F;work&#x2F;scripts&#x2F;allergan&#x2F;scancode_azure</span><br><span class="line">日志位置：&#x2F;data&#x2F;work&#x2F;logs&#x2F;scan_时间戳.log</span><br><span class="line">接受数据文件位置：&#x2F;data&#x2F;allergan&#x2F;allergan_members&#x2F;scancode_时间戳.zip</span><br></pre></td></tr></table></figure><ul><li>表情包编码异常数据</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1.ETL例子：ami_business_school.job we_chat_user.ktr</span><br><span class="line">2.表输入数据库连接编码：characterEncoding utf8  </span><br><span class="line">3.表&amp;字段编码：utf8mb4</span><br></pre></td></tr></table></figure><ul><li><p>通过kettle上传数据到maxcompute</p><p>下载kettle的maxcompute插件</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aliyun-kettle-odps-plugin-2.0.4.tar.gz</span><br></pre></td></tr></table></figure><p>官方文档地址：<a href="https://developer.aliyun.com/article/68911">https://developer.aliyun.com/article/68911</a>  ［ETL实践指南］基于Kettle的MaxCompute插件实现数据上云</p><p>AccessID和Accesskey获取：阿里云账号头像-&gt;Accesskey管理-&gt;创建AccessKey-&gt;得到AccessKey ID (AccessID)和 AccessKey Secret(AccessKey)  </p><h3><span id="六-疑问">六、疑问</span></h3><ul><li>中转机</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1.在allergan_data_etl.job中有取自Pchina_calls_tables.txt的表的同步任务，不知道做什么用</span><br><span class="line">2.除了D:\customer-client\allergan_data_every_day.kjb任务的脚本定时任务，其他任务的定时任务脚本不知道在哪里设置的·</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 服务器 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
